@{
    var modules = ViewBag.Modules as IEnumerable<AEMSWEB.Models.ModuleView>;
    var companyId = ViewContext.RouteData.Values["companyId"]?.ToString();

    var categoryIcons = new Dictionary<string, string>
{
        { "Region", "handshake" },
        { "Product", "content_paste" },
        { "Customer / Vendor", "group_add" },
        { "Finance", "account_circle" },
        { "GL Code", "code" },
        { "Category", "star" },
        { "Employee", "add" },
        { "Others", "other_admission" },
        { "Job", "work" },
        { "Tariff", "tariff" },
        { "Report", "report" },
        { "TimeSheet", "timesheet" },
        { "AR", "trending_down" },
        { "AP", "trending_up" },
        { "CB", "book_2" },
        { "GL", "library_books" },
        { "Admin", "shield_person" },
        { "Setting", "Settings" }
    };
}

<div class="sidebar-area" id="sidebar-area">
    <div class="logo position-relative">
        <a href="@Url.Action("Index", "Dashboard", new { companyId = companyId })" class="d-block text-decoration-none position-relative">
            <img src="~/images/logo-icon.png" alt="logo-icon" />
            <span class="logo-text fw-bold text-dark">AMES</span>
            <span id="sidebarCompanyName" class="company-name"></span>
        </a>
        <button class="sidebar-burger-menu bg-transparent p-0 border-0 opacity-0 z-n1 position-absolute top-50 end-0 translate-middle-y" id="sidebar-burger-menu">
            <i data-feather="x"></i>
        </button>
    </div>

    <aside id="layout-menu" class="layout-menu menu-vertical menu active" data-simplebar>
        <ul class="menu-inner">
            <!-- Dashboard Section -->
            <li class="menu-item @(Context.Request.Path.StartsWithSegments($"/{companyId}/dashboard") ? "open" : "")">
                <a href="@Url.Action("Index", "Dashboard", new { companyId = companyId })"
                   class="menu-link menu-toggle @(Context.Request.Path.StartsWithSegments($"/{companyId}/dashboard") ? "active" : "")">
                    <span class="material-symbols-outlined menu-icon">dashboard</span>
                    <span class="title">Dashboard</span>
                </a>

                <ul class="menu-sub">
                    <li class="menu-item">
                        <a href="@Url.Action("Finance", "Dashboard", new { companyId = companyId })"
                           class="menu-link @(Context.Request.Path == $"/{companyId}/dashboard/finance" ? "active" : "")">
                            Finance
                        </a>
                    </li>
                    <li class="menu-item mb-0">
                        <a href="@Url.Action("Hrm", "Dashboard", new { companyId = companyId })"
                           class="menu-link @(Context.Request.Path == $"/{companyId}/dashboard/hrm" ? "active" : "")">
                            HRM
                        </a>
                    </li>
                    <li class="menu-item mb-0">
                        <a href="@Url.Action("Job", "Dashboard", new { companyId = companyId })"
                           class="menu-link @(Context.Request.Path == $"/{companyId}/dashboard/job" ? "active" : "")">
                            Job
                        </a>
                    </li>
                    <li class="menu-item mb-0">
                        <a href="@Url.Action("Account", "Dashboard", new { companyId = companyId })"
                           class="menu-link @(Context.Request.Path == $"/{companyId}/dashboard/account" ? "active" : "")">
                            Account
                        </a>
                    </li>
                    <li class="menu-item mb-0">
                        <a href="@Url.Action("Documents", "Dashboard", new { companyId = companyId })"
                           class="menu-link @(Context.Request.Path == $"/{companyId}/dashboard/documents" ? "active" : "")">
                            Documents
                        </a>
                    </li>
                </ul>
            </li>

            <!-- Modules Section -->
            @if (modules != null)
            {
                foreach (var module in modules.OrderBy(m => m.ModuleSeqNo))
                {
                    <li class="menu-title small text-uppercase">
                        <span class="menu-title-text">@module.ModuleName</span>
                    </li>

                    @if (module.TransCategorys?.Any() == true)
                    {
                        @foreach (var transcategory in module.TransCategorys.OrderBy(t => t.TransCategoryName))
                        {
                            var isCategoryActive = transcategory.Transactions.Any(t =>
                                Context.Request.Path.Equals(
                                    $"/{companyId}/{module.ModuleCode}/{t.TransactionCode}/Index",
                                    StringComparison.OrdinalIgnoreCase
                                ));

                            var iconClass = categoryIcons.ContainsKey(transcategory.TransCategoryName)
                                ? categoryIcons[transcategory.TransCategoryName]
                                : "settings";

                            <li class="menu-item @(isCategoryActive ? "open" : "")">
                                <a href="javascript:void(0);"
                                   class="menu-link menu-toggle @(isCategoryActive ? "active" : "")">
                                    <span class="material-symbols-outlined menu-icon">@iconClass</span>
                                    <span class="title">@transcategory.TransCategoryName</span>
                                </a>

                                <ul class="menu-sub">
                                    @foreach (var transaction in transcategory.Transactions.OrderBy(t => t.TransactionName))
                                    {
                                        var expectedPath = $"/{companyId}/{module.ModuleCode}/{transaction.TransactionCode}/Index";
                                        var isActive = Context.Request.Path.Equals(expectedPath, StringComparison.OrdinalIgnoreCase);

                                        <li class="menu-item">
                                            <a asp-area="@module.ModuleCode"
                                               asp-controller="@transaction.TransactionCode"
                                               asp-action="Index"
                                               class="menu-link @(isActive ? "active" : "")">
                                                @transaction.TransactionName
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </li>
                        }
                    }
                }
            }

            <!-- Logout Section -->
            <li class="menu-item">
                <form asp-controller="Account"
                      asp-action="Logout"
                      asp-route-companyId="@companyId"
                      method="post"
                      style="display: inline;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="menu-link" style="background: none; border: none; cursor: pointer;">
                        <span class="material-symbols-outlined menu-icon">logout</span>
                        <span class="title">Logout</span>
                    </button>
                </form>
            </li>
        </ul>
    </aside>
</div>

<script>
    // Store active state in browser storage
    function loadContent(event, url, category) {
        event.preventDefault();
        sessionStorage.setItem('activeCategory', category);
        // ... existing AJAX code ...
    }

    // On page load, restore state
    document.addEventListener('DOMContentLoaded', () => {
        const activeCategory = sessionStorage.getItem('activeCategory');
        if (activeCategory) {
            const categoryElement = document.querySelector(`[data-category="${activeCategory}"]`);
            if (categoryElement) {
                categoryElement.classList.add('open', 'active');
            }
        }
    });

    function triggerGlobalLogout() {
        // Cross-tab logout notification
        localStorage.setItem('logout-event', Date.now());
        document.getElementById('logoutForm').submit();
    }
</script>
@{
    ViewData["Title"] = $"Setting";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@{
    bool canCreate = ViewBag.IsCreate ?? false;
    bool canEdit = ViewBag.IsEdit ?? false;
    bool canDelete = ViewBag.IsDelete ?? false;
    bool canRead = ViewBag.IsRead ?? false;
    bool canExport = ViewBag.IsExport ?? false;
    bool canPrint = ViewBag.IsPrint ?? false;
}

<style>
    /* SETTINGS MODULE STYLES */
    .settings-card {
        margin-bottom: 2rem;
        border-radius: 0.5rem;
    }

    .module-card .list-group-item {
        padding: 0.5rem 1rem;
        transition: background-color 0.2s;
    }

    .module-link {
        color: var(--bs-dark);
        text-decoration: none;
    }

    .settings-table th {
        background-color: var(--bs-light);
        font-weight: 500;
    }

    .module-card {
        margin-bottom: 10px;
        font-size: 0.9rem;
    }

        .module-card .card-body {
            padding: 10px;
        }

    /* Different colours for modules */
    .module-AR {
        background-color: #f8d7da;
    }
    /* light red */
    .module-AP {
        background-color: #d1ecf1;
    }
    /* light blue */
    .module-CB {
        background-color: #d4edda;
    }
    /* light green */
    .module-GL {
        background-color: #fff3cd;
    }
    /* light yellow */
    /* Details tab styling */
    #detailsTab {
        margin-top: 20px;
    }
</style>

<ul class="nav nav-pills mb-4 border-bottom pb-2" id="invoicePills" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="decimal-tab" data-bs-toggle="tab" data-bs-target="#decimal" type="button" role="tab">
            <span class="material-symbols-outlined">calculate</span>Decimal
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="finance-tab" data-bs-toggle="tab" data-bs-target="#finance" type="button" role="tab">
            <span class="material-symbols-outlined">monetization_on</span>Finance
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="mandatory-tab" data-bs-toggle="tab" data-bs-target="#mandatory" type="button" role="tab">
            <span class="material-symbols-outlined">priority_high</span>Mandatory
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="visibility-tab" data-bs-toggle="tab" data-bs-target="#visibility" type="button" role="tab">
            <span class="material-symbols-outlined">visibility</span>Visibility
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="number-format-tab" data-bs-toggle="tab" data-bs-target="#number-format" type="button" role="tab">
            <span class="material-symbols-outlined">tag</span>Number Format
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="user-setting-tab" data-bs-toggle="tab" data-bs-target="#user-setting" type="button" role="tab">
            <span class="material-symbols-outlined">settings</span>User Setting
        </button>
    </li>
</ul>

<!-- Tab Contents -->
<div class="tab-content mt-3">
    <div class="tab-pane fade show active" id="decimal" role="tabpanel">
        @await Html.PartialAsync("_DecimalSettings")
    </div>

    <!-- Finance Tab -->
    <div class="tab-pane fade" id="finance" role="tabpanel">
        @await Html.PartialAsync("_FinanceSettings")
    </div>

    <!-- Mandatory Tab -->
    <div class="tab-pane fade" id="mandatory" role="tabpanel">
        @await Html.PartialAsync("_MandatorySettings")
    </div>

    <!-- Visibility Tab -->
    <div class="tab-pane fade" id="visibility" role="tabpanel">
        @await Html.PartialAsync("_VisibilitySettings")
    </div>

    <!-- Number Format Tab -->
    <div class="tab-pane fade" id="number-format" role="tabpanel">
        @await Html.PartialAsync("_NumberFormat")
    </div>

    <!-- User Setting Tab -->
    <div class="tab-pane fade" id="user-setting" role="tabpanel">
        @await Html.PartialAsync("_UserSettings")
    </div>
</div>


@section Scripts {

    <script>

        function SelectedDropdown(DrpdwnName) {
        }

        function OnSelectDropdown(dataItem, DrpdwnName) {
        }

        let companyId = 0;
        $(document).ready(function () {
            companyId = getUrlParameter('companyId');

            debugger;
            permissions = {
                canCreate: @Json.Serialize(canCreate),
                canEdit: @Json.Serialize(canEdit),
                canDelete: @Json.Serialize(canDelete),
                canRead: @Json.Serialize(canRead),
            };
            Refresh();
        });

        function Refresh() {
            const glUrl = '@Url.Action("GetChartOfAccountLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            BindComboBox(glUrl, "cmb_exhgainloss", "glName", "glId");
            BindComboBox(glUrl, "cmb_bankcharges", "glName", "glId");
            BindComboBox(glUrl, "cmb_profitndloss", "glName", "glId");
            BindComboBox(glUrl, "cmb_returneraing", "glName", "glId");
            BindComboBox(glUrl, "cmb_salegst", "glName", "glId");
            BindComboBox(glUrl, "cmb_purchasegst", "glName", "glId");
            BindComboBox(glUrl, "cmb_saledefine", "glName", "glId");
            BindComboBox(glUrl, "cmb_purchasedefine", "glName", "glId");

            const currencyUrl = '@Url.Action("GetCurrencyLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            BindComboBox(currencyUrl, "cmb_basecurrency", "currencyName", "currencyId");
            BindComboBox(currencyUrl, "cmb_localcurrency", "currencyName", "currencyId");

              @*const moduleUrl = '@Url.Action("GetModuleLookup", "Lookup", new { area = "" })';
              BindComboBox(moduleUrl, "cmb_mandatorymodule", "moduleName", "moduleId");
              BindComboBox(moduleUrl, "cmb_visiblitymodule", "moduleName", "moduleId");*@
        }

        document.addEventListener('DOMContentLoaded', function () {
            const financeForm = document.getElementById('financeForm');

            // Form submission validation
            financeForm.addEventListener('submit', function (e) {
                let isValid = true;

                // Validate all required selects
                financeForm.querySelectorAll('select[required]').forEach(select => {
                    if (!select.value) {
                        select.classList.add('is-invalid');
                        isValid = false;
                    } else {
                        select.classList.remove('is-invalid');
                    }
                });

                if (!isValid) {
                    e.preventDefault();
                    alert('Please complete all required fields before saving');
                }
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('decimalForm');

            // Real-time validation
            form.querySelectorAll('input[type="number"]').forEach(input => {
                input.addEventListener('input', function () {
                    const min = parseInt(this.min);
                    const max = parseInt(this.max);
                    const value = parseInt(this.value);

                    if (value < min || value > max) {
                        this.classList.add('is-invalid');
                    } else {
                        this.classList.remove('is-invalid');
                    }
                });
            });

            // Form submission validation
            form.addEventListener('submit', function (e) {
                let isValid = true;

                form.querySelectorAll('input[type="number"]').forEach(input => {
                    const min = parseInt(input.min);
                    const max = parseInt(input.max);
                    const value = parseInt(input.value);

                    if (value < min || value > max || isNaN(value)) {
                        input.classList.add('is-invalid');
                        isValid = false;
                    } else {
                        input.classList.remove('is-invalid');
                    }
                });

                if (!isValid) {
                    e.preventDefault();
                    alert('Please fix the invalid fields before saving');
                }
            });
        });
    </script>
}
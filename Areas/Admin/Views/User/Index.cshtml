@{
    ViewData["Title"] = $"Admin";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@{
    bool canCreate = ViewBag.IsCreate ?? false;
    bool canEdit = ViewBag.IsEdit ?? false;
    bool canDelete = ViewBag.IsDelete ?? false;
    bool canRead = ViewBag.IsRead ?? false;
    bool canExport = ViewBag.IsExport ?? false;
    bool canPrint = ViewBag.IsPrint ?? false;
}

<style>
    .hidden-column {
        display: none;
    }
</style>

@*https://www.jqueryscript.net/other/scrolling-bootstrap-tabs.html*@

<ul class="nav nav-pills mb-4 border-bottom pb-2" id="invoicePills" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="user-tab" data-bs-toggle="pill" data-bs-target="#user" type="button" role="tab">
            <span class="material-symbols-outlined ">person</span>User
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="usergroup-tab" data-bs-toggle="tab" data-bs-target="#usergroup" type="button" role="tab">
            <span class="material-symbols-outlined ">group</span>User Group
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="userrights-tab" data-bs-toggle="tab" data-bs-target="#userrights" type="button" role="tab">
            <span class="material-symbols-outlined ">shield</span>User Rights
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="usergrouprights-tab" data-bs-toggle="tab" data-bs-target="#usergrouprights" type="button" role="tab">
            <span class="material-symbols-outlined ">admin_panel_settings</span>User Group Rights
        </button>
    </li>
</ul>

<!-- Tab Contents -->
<div class="tab-content mt-3">
    <!-- User Tab -->
    <div class="tab-pane fade show active" id="user" role="tabpanel">
        @await Html.PartialAsync("_User")
    </div>

    <!-- User Group Tab -->
    <div class="tab-pane fade" id="usergroup" role="tabpanel">
        @await Html.PartialAsync("_UserGroup")
    </div>

    <!-- User Rights Tab Content -->
    <div class="tab-pane fade" id="userrights" role="tabpanel">
        @await Html.PartialAsync("_UserRights")
    </div>

    <!-- User Group Rights Tab -->
    <div class="tab-pane fade" id="usergrouprights" role="tabpanel">
        @await Html.PartialAsync("_UserGroupRights")
    </div>
</div>

@section externalhtml {

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this account group?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        let companyId = 0;
        // Optionally, load the rights when the page or tab loads.
        $(document).ready(function () {
            companyId = getUrlParameter('companyId');

            debugger;
            permissions = {
                canCreate: @Json.Serialize(canCreate),
                canEdit: @Json.Serialize(canEdit),
                canDelete: @Json.Serialize(canDelete),
                canRead: @Json.Serialize(canRead),
            };

            Refresh();
            loadUserGrid();
            loadUserGroupGrid();

            // Initialize both user dropdowns
            $("#cmb_usergroup, #cmb_user_group").kendoComboBox({
                change: function () {
                    if (this.element[0].id === "cmb_user") {
                        loadUserRights();
                    } else {
                        loadGroupRights();
                    }
                }
            });

            // Initialize usergroup dropdown
            $("#cmb_usergroup").kendoComboBox({
                change: loadGroupRights
            });
        });

        function Refresh() {
            const userUrl = '@Url.Action("GetUserLookup", "Lookup", new { area = "" })';
            BindComboBox(userUrl, "cmb_user", "userName", "userId");

            const userGroupUrl = '@Url.Action("GetUserGroupLookup", "Lookup", new { area = "" })';
            BindComboBox(userGroupUrl, "cmb_usergroup", "userGroupName", "userGroupId");
            BindComboBox(userGroupUrl, "cmb_usergroup_user", "userGroupName", "userGroupId");
        }

        function SelectedDropdown(DrpdwnName) {
        }

        function OnSelectDropdown(dataItem, DrpdwnName) {
            if (DrpdwnName == 'cmb_user') {
                debugger;
                loadUserRights();
            }
        }

        $('#btnUserEdit').on('click', function () {
            setMode("edit");
        });

        $('#btnClose').on('click', function () {
            $('#addUserModal').modal('hide');
        });

        $('#adduserrecord').on('click', function () {
            clearUserForm();
            setDefaultUserValues();
            $('#btnClose').show();
            $('#btnUserSave').show();
            $('#btnUserEdit').hide();
        });

        $('#btnUserGroupEdit').on('click', function () {
            setMode("edit");
        });

        $('#btnClose').on('click', function () {
            $('#addUserGroupModal').modal('hide');
        });

        $('#addusergrouprecord').on('click', function () {
            clearUserGroupForm();
            setDefaultUserGroupValues();
            $('#btnClose').show();
            $('#btnUserGroupSave').show();
            $('#btnUserGroupEdit').hide();
        });

        // Column-wise Select All
        $(document).on('change', '.select-all-col', function () {
            const column = $(this).data("col"); // e.g., "view"
            const isChecked = $(this).prop("checked");
            $(`.${column}Checkbox`).prop("checked", isChecked);
        });

        // Row-wise Select All
        $(document).on('change', '.select-row', function () {
            const $row = $(this).closest("tr");
            const isChecked = $(this).prop("checked");
            $row.find(":checkbox:not(.select-row)").prop("checked", isChecked);
        });
    </script>
}
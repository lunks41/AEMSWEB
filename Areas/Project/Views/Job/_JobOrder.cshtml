<style>
    /* Custom modal width */
    #viewJobOrderModal .modal-dialog {
        max-width: 80vw; /* Use viewport width units */
        width: 80%; /* Fallback */
        margin: 0 auto; /* Center modal */
    }

    /* Make modal content full width */
    #viewJobOrderModal .modal-content {
        width: 100%;
        min-height: 80vh; /* Optional: Set minimum height */
    }

    /* Remove horizontal padding in modal body */
    #viewJobOrderModal .modal-body {
        padding-left: 0;
        padding-right: 0;
    }

    /* Make container full width */
    #viewJobOrderModal .container {
        max-width: 100%;
        padding-left: 1rem;
        padding-right: 1rem;
    }

    .dropdown-menu {
        min-width: 200px;
    }

    .dropdown-item {
        font-size: 0.9rem;
        padding: 0.5rem 1rem;
    }

    .bi {
        font-size: 0.9rem;
    }
</style>

<div class="modal fade" id="viewJobOrderModal" tabindex="-1" aria-labelledby="viewJobOrderModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog custom-modal-width">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewJobOrderModalLabel">Job Order </h5>
                <div class="ms-auto d-flex align-items-center gap-2">
                    <div class="dropdown">
                        <button class="btn btn-primary dropdown-toggle btn-sm" type="button"
                                id="printDropdown" data-bs-toggle="dropdown"
                                aria-expanded="false">
                            <i class="bi bi-printer me-1"></i>Print
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="printDropdown">
                            <li>
                                <a class="dropdown-item" href="javascript:void(0)"
                                   onclick="printDocument('checklist')">
                                    <i class="bi bi-list-check me-2"></i>Check List
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="javascript:void(0)"
                                   onclick="printDocument('purchaselist')">
                                    <i class="bi bi-cart me-2"></i>Purchase List
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="javascript:void(0)"
                                   onclick="printDocument('accountlist')">
                                    <i class="bi bi-journal-bookmark me-2"></i>Account List
                                </a>
                            </li>
                        </ul>
                    </div>
                    <button type="button" class="btn btn-warning"
                            id="openAddJobOrderModal"
                            onclick="openChildViewJobOrderModal();">
                        View
                    </button>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
            </div>
            <div class="modal-body">
                <div class="container-fluid mt-3">
                    <input type="hidden" id="companyId" />
                    <input type="hidden" id="view_jobOrderId" />
                    <input type="hidden" id="view_customerId" />
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="control-label text-dark">JobOrder No :</label>
                                <b><span id="view_jobOrderNo" class="text-dark"></span></b>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="control-label text-dark">Customer Name : </label>
                                <b><span id="view_customerName" class="text-dark"></span></b>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="control-label text-dark">JobOrder Date :</label>
                                <b><span id="view_jobOrderDate" class="text-dark"></span></b>
                            </div>
                        </div>
                    </div>
                    <!-- Section 1: Customer Job Details -->

                    <div>
                        <!-- Row 2 -->
                        <div class="row mb-3">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Vessel Name : </label>
                                    <b><span id="view_vesselName" class="text-dark"></span></b>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">IMO No : </label>
                                    <b><span id="view_imoNo" class="text-dark"></span></b>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">ETA : </label>
                                    <b><span id="view_eta" class="text-dark"></span></b>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">ETD : </label>
                                    <b><span id="view_etd" class="text-dark"></span></b>
                                </div>
                            </div>
                        </div>

                        <!-- Row 3 -->
                        <div class="row mb-3">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Master's Name : </label>
                                    <b><span id="view_mastersName" class="text-dark"></span></b>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Port of Call : </label>
                                    <b><span id="view_portName" class="text-dark"></span></b>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Next Port : </label>
                                    <b><span id="view_nextportName" class="text-dark"></span></b>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Last Port : </label>
                                    <b><span id="view_lastportName" class="text-dark"></span></b>
                                </div>
                            </div>
                        </div>

                        <!-- Row 4 -->
                        <div class="row mb-3">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Nature of Call : </label>
                                    <b><span id="view_natureOfCall" class="text-dark"></span></b>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">ISPS : </label>
                                    <b><span id="view_isps" class="text-dark"></span></b>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Owners Master : </label>
                                    <b><span id="view_ownersMaster" class="text-dark"></span></b>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Owners Agents : </label>
                                    <b><span id="view_ownersAgents" class="text-dark"></span></b>
                                </div>
                            </div>
                        </div>

                        <!-- Row 5 -->
                        <div class="row mb-3">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Charters : </label>
                                    <b><span id="view_charters" class="text-dark"></span></b>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Charters Agents : </label>
                                    <b><span id="view_chartersAgents" class="text-dark"></span></b>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Status : </label>
                                    <b><span id="view_statusName" class="text-dark"></span></b>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Remarks : </label>
                                    <b><span id="view_remarks" class="text-dark"></span></b>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Section 2: Task Tab with Grids -->
                    <div class="card mb-3">
                        <div class="card-header bg-secondary text-white">Service Details</div>
                        <div class="card-body">
                            <!-- Scrollable Tabs -->
                            <div class="position-relative">
                                <button class="btn btn-sm btn-secondary scroll-left" onclick="scrollTabs(-100)">&lt;</button>
                                <button class="btn btn-sm btn-secondary scroll-right" onclick="scrollTabs(100)">&gt;</button>
                                <ul class="nav nav-pills mb-3 flex-nowrap" id="serviceTabs" role="tablist">
                                    <!-- Main Service Tabs -->
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#port-expenses" type="button" data-status="PortExpense">
                                            <span class="badge bg-secondary me-1">0</span> Port Expenses
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#launch-services" type="button" data-status="LaunchServices">
                                            <span class="badge bg-secondary me-1">0</span> Launch Services
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#equipments-used" type="button" data-status="EquipmentsUsed">
                                            <span class="badge bg-primary me-1">0</span> Equipments Used
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#crew-sign-on" type="button" data-status="CrewSignOn">
                                            <span class="badge bg-success me-1">0</span> Crew Sign On
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#crew-sign-off" type="button" data-status="CrewSignOff">
                                            <span class="badge bg-danger me-1">0</span> Crew Sign Off
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#crew-miscellaneous" type="button" data-status="CrewMiscellaneous">
                                            <span class="badge bg-info me-1">0</span> Crew Miscellaneous
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#medical-assistance" type="button" data-status="MedicalAssistance">
                                            <span class="badge bg-warning me-1">0</span> Medical Assistance
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#consignment-import" type="button" data-status="ConsignmentImport">
                                            <span class="badge bg-primary me-1">0</span> Consignment Import
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#consignment-export" type="button" data-status="ConsignmentExport">
                                            <span class="badge bg-success me-1">0</span> Consignment Export
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#third-party-supply" type="button" data-status="ThirdPartySupply">
                                            <span class="badge bg-danger me-1">0</span> Third Party Supply
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#fresh-water" type="button" data-status="FreshWaterSupply">
                                            <span class="badge bg-info me-1">0</span> Fresh Water
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#technicians-surveyors" type="button" data-status="TechniciansSurveyors">
                                            <span class="badge bg-warning me-1">0</span> Technicians Surveyors
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#landing-items" type="button" data-status="LandingItems">
                                            <span class="badge bg-primary me-1">0</span> Landing Items
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#other-service" type="button" data-status="OtherService">
                                            <span class="badge bg-success me-1">0</span> Other Service
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#agency-remuneration" type="button" data-status="AgencyRemuneration">
                                            <span class="badge bg-danger me-1">0</span> Agency Remuneration
                                        </button>
                                    </li>
                                </ul>
                            </div>

                            <!-- Tab Content -->
                            <div class="tab-content" id="serviceTabContent">
                                <!-- Port Expenses Tab -->
                                <div class="tab-pane fade show active" id="port-expenses">
                                    <!-- Button Group for Port Expenses -->
                                    <div class="mb-3 d-flex align-items-center flex-wrap">
                                        <button id="btnAddPortExpense" onclick="openChildModal('PortExpense')" class="btn btn-primary me-2">Add Port Expense</button>
                                        <button id="btnCreateDebitNotePortExpense" onclick="openChildDebitNoteModal('PortExpense')" class="btn btn-secondary me-2" disabled>Create DebitNote</button>
                                        <button id="btnTaskForwardPortExpense" onclick="openChildTaskForwardModal('PortExpense',1)" class="btn btn-info me-2" disabled>Task Forward</button>
                                        <button id="btnBulkUpdatePortExpense" onclick="openChildBulkUpdateModal('PortExpense',1)" class="btn btn-warning me-2" disabled>Bulk Update</button>

                                        <!-- Checkbox -->
                                        <div class="form-check me-2 mb-0">
                                            <input type="checkbox" id="isPortExpenseDebitNoteNo" class="form-check-input" disabled>
                                            <label for="isPortExpenseDebitNoteNo" class="form-check-label">Is Own DebitNote No.</label>
                                        </div>

                                        <!-- Input Box -->
                                        <input type="text" id="portExpensedebitNoteNo" class="form-control" placeholder="Enter Debit Note No." style="display: none; width: auto;" disabled>
                                    </div>

                                    <!-- Grid for Port Expenses -->
                                    <div id="grid-PortExpense" class="kendo-grid"></div>
                                </div>

                                <!-- Launch Services Tab -->
                                <div class="tab-pane fade" id="launch-services">
                                    <!-- Button Group for Launch Services (adjust as needed) -->
                                    <div class="mb-3 d-flex align-items-center flex-wrap">
                                        <button id="btnAddLaunchService" onclick="openChildModal('LaunchService')" class="btn btn-primary me-2">Add Port Expense</button>
                                        <button id="btnCreateDebitNoteLaunchService" onclick="openChildDebitNoteModal('LaunchService')" class="btn btn-secondary me-2" disabled>Create DebitNote</button>
                                        <button id="btnTaskForwardLaunchService" onclick="openChildTaskForwardModal('LaunchService',2)" class="btn btn-info me-2" disabled>Task Forward</button>
                                        <button id="btnBulkUpdateLaunchService" onclick="openChildBulkUpdateModal('LaunchService',2)" class="btn btn-warning me-2" disabled>Bulk Update</button>

                                        <!-- Checkbox -->
                                        <div class="form-check me-2 mb-0">
                                            <input type="checkbox" id="isLaunchServiceDebitNoteNo" class="form-check-input" disabled>
                                            <label for="isLaunchServiceDebitNoteNo" class="form-check-label">Is Own DebitNote No.</label>
                                        </div>

                                        <!-- Input Box -->
                                        <input type="text" id="portExpensedebitNoteNo" class="form-control" placeholder="Enter Debit Note No." style="display: none; width: auto;" disabled>
                                    </div>
                                    <!-- Grid for Launch Services -->
                                    <div id="grid-LaunchService" class="kendo-grid"></div>
                                </div>

                                <!-- Equipments Used Tab -->
                                <div class="tab-pane fade" id="equipments-used">
                                    <!-- Button Group for Equipments Used -->
                                    <div class="mb-3 d-flex align-items-center flex-wrap">
                                        <button id="btnAddEquipmentUsed" onclick="openChildModal('EquipmentUsed')" class="btn btn-primary me-2">Add Port Expense</button>
                                        <button id="btnCreateDebitNoteEquipmentUsed" onclick="openChildDebitNoteModal('EquipmentUsed')" class="btn btn-secondary me-2" disabled>Create DebitNote</button>
                                        <button id="btnTaskForwardEquipmentUsed" onclick="openChildTaskForwardModal('EquipmentUsed',3)" class="btn btn-info me-2" disabled>Task Forward</button>
                                        <button id="btnBulkUpdateEquipmentUsed" onclick="openChildBulkUpdateModal('EquipmentUsed',3)" class="btn btn-warning me-2" disabled>Bulk Update</button>

                                        <!-- Checkbox -->
                                        <div class="form-check me-2 mb-0">
                                            <input type="checkbox" id="isEquipmentUsedDebitNoteNo" class="form-check-input" disabled>
                                            <label for="isEquipmentUsedDebitNoteNo" class="form-check-label">Is Own DebitNote No.</label>
                                        </div>

                                        <!-- Input Box -->
                                        <input type="text" id="portExpensedebitNoteNo" class="form-control" placeholder="Enter Debit Note No." style="display: none; width: auto;" disabled>
                                    </div>
                                    <!-- Grid for Equipments Used -->
                                    <div id="grid-EquipmentUsed" class="kendo-grid"></div>
                                </div>

                                <!-- Crew Sign On Tab -->
                                <div class="tab-pane fade" id="crew-sign-on">
                                    <!-- Button Group for Crew Sign On -->
                                    <div class="mb-3">
                                        <button id="btnAddCrewSignOn" onclick="openChildModal('CrewSignOn')" class="btn btn-primary me-2">Add Crew Sign On</button>
                                        <button id="btnCreateDebitNoteCrewOn" class="btn btn-secondary me-2">Create DebitNote</button>
                                        <button id="btnTaskForwardCrewOn" class="btn btn-info me-2">Task Forward</button>
                                        <button id="btnBulkUpdateCrewOn" class="btn btn-warning">Bulk Update</button>
                                    </div>
                                    <!-- Grid for Crew Sign On -->
                                    <div id="grid-CrewSignOn" class="kendo-grid"></div>
                                </div>

                                <!-- Crew Sign Off Tab -->
                                <div class="tab-pane fade" id="crew-sign-off">
                                    <!-- Button Group for Crew Sign Off -->
                                    <div class="mb-3">
                                        <button id="btnAddCrewSignOff" onclick="openChildModal('CrewSignOff')" class="btn btn-primary me-2">Add Crew Sign Off</button>
                                        <button id="btnCreateDebitNoteCrewOff" class="btn btn-secondary me-2">Create DebitNote</button>
                                        <button id="btnTaskForwardCrewOff" class="btn btn-info me-2">Task Forward</button>
                                        <button id="btnBulkUpdateCrewOff" class="btn btn-warning">Bulk Update</button>
                                    </div>
                                    <!-- Grid for Crew Sign Off -->
                                    <div id="grid-CrewSignOff" class="kendo-grid"></div>
                                </div>

                                <!-- Crew Miscellaneous Tab -->
                                <div class="tab-pane fade" id="crew-miscellaneous">
                                    <!-- Button Group for Crew Miscellaneous -->
                                    <div class="mb-3">
                                        <button id="btnAddCrewMisc" onclick="openChildModal('CrewMisc')" class="btn btn-primary me-2">Add Crew Miscellaneous</button>
                                        <button id="btnCreateDebitNoteCrewMisc" class="btn btn-secondary me-2">Create DebitNote</button>
                                        <button id="btnTaskForwardCrewMisc" class="btn btn-info me-2">Task Forward</button>
                                        <button id="btnBulkUpdateCrewMisc" class="btn btn-warning">Bulk Update</button>
                                    </div>
                                    <!-- Grid for Crew Miscellaneous -->
                                    <div id="grid-CrewMisc" class="kendo-grid"></div>
                                </div>

                                <!-- Medical Assistance Tab -->
                                <div class="tab-pane fade" id="medical-assistance">
                                    <!-- Button Group for Medical Assistance -->
                                    <div class="mb-3">
                                        <button id="btnAddMedicalAssistance" onclick="openChildModal('MedicalAssistance')" class="btn btn-primary me-2">Add Medical Assistance</button>
                                        <button id="btnCreateDebitNoteMedical" class="btn btn-secondary me-2">Create DebitNote</button>
                                        <button id="btnTaskForwardMedical" class="btn btn-info me-2">Task Forward</button>
                                        <button id="btnBulkUpdateMedical" class="btn btn-warning">Bulk Update</button>
                                    </div>
                                    <!-- Grid for Medical Assistance -->
                                    <div id="grid-MedicalAssistance" class="kendo-grid"></div>
                                </div>

                                <!-- Consignment Import Tab -->
                                <div class="tab-pane fade" id="consignment-import">
                                    <!-- Button Group for Consignment Import -->
                                    <div class="mb-3 d-flex align-items-center flex-wrap">
                                        <button id="btnAddConsignmentImport" onclick="openChildModal('ConsignmentImport')" class="btn btn-primary me-2">Add Consignment Import</button>
                                        <button id="btnCreateDebitNoteConsignmentImport" onclick="openChildDebitNoteModal('ConsignmentImport')" class="btn btn-secondary me-2" disabled>Create DebitNote</button>
                                        <button id="btnTaskForwardConsignmentImport" onclick="openChildTaskForwardModal('ConsignmentImport',8)" class="btn btn-info me-2" disabled>Task Forward</button>
                                        <button id="btnBulkUpdateConsignmentImport" onclick="openChildBulkUpdateModal('ConsignmentImport',8)" class="btn btn-warning me-2" disabled>Bulk Update</button>

                                        <!-- Checkbox -->
                                        <div class="form-check me-2 mb-0">
                                            <input type="checkbox" id="isConsignmentImportDebitNoteNo" class="form-check-input" disabled>
                                            <label for="isConsignmentImportDebitNoteNo" class="form-check-label">Is Own DebitNote No.</label>
                                        </div>

                                        <!-- Input Box -->
                                        <input type="text" id="consignmentImportDebitNoteNo" class="form-control" placeholder="Enter Debit Note No." style="display: none; width: auto;" disabled>
                                    </div>
                                    <!-- Grid for Consignment Import -->
                                    <div id="grid-ConsignmentImport" class="kendo-grid"></div>
                                </div>

                                <!-- Consignment Export Tab -->
                                <div class="tab-pane fade" id="consignment-export">
                                    <!-- Button Group for Consignment Export -->
                                    <div class="mb-3 d-flex align-items-center flex-wrap">
                                        <button id="btnAddConsignmentExport" onclick="openChildModal('ConsignmentExport')" class="btn btn-primary me-2">Add Consignment Export</button>
                                        <button id="btnCreateDebitNoteConsignmentExport" onclick="openChildDebitNoteModal('ConsignmentExport')" class="btn btn-secondary me-2" disabled>Create DebitNote</button>
                                        <button id="btnTaskForwardConsignmentExport" onclick="openChildTaskForwardModal('ConsignmentExport',9)" class="btn btn-info me-2" disabled>Task Forward</button>
                                        <button id="btnBulkUpdateConsignmentExport" onclick="openChildBulkUpdateModal('ConsignmentExport',9)" class="btn btn-warning me-2" disabled>Bulk Update</button>

                                        <!-- Checkbox -->
                                        <div class="form-check me-2 mb-0">
                                            <input type="checkbox" id="isConsignmentExportDebitNoteNo" class="form-check-input" disabled>
                                            <label for="isConsignmentExportDebitNoteNo" class="form-check-label">Is Own DebitNote No.</label>
                                        </div>

                                        <!-- Input Box -->
                                        <input type="text" id="consignmentExportDebitNoteNo" class="form-control" placeholder="Enter Debit Note No." style="display: none; width: auto;" disabled>
                                    </div>
                                    <!-- Grid for Consignment Export -->
                                    <div id="grid-ConsignmentExport" class="kendo-grid"></div>
                                </div>

                                <!-- Third Party Supply Tab -->
                                <div class="tab-pane fade" id="third-party-supply">
                                    <!-- Button Group for Third Party Supply -->
                                    <div class="mb-3">
                                        <button id="btnAddThirdPartySupply" onclick="openChildModal('ThirdPartySupply')" class="btn btn-primary me-2">Add Third Party Supply</button>
                                        <button id="btnCreateDebitNoteThirdParty" class="btn btn-secondary me-2">Create DebitNote</button>
                                        <button id="btnTaskForwardThirdParty" class="btn btn-info me-2">Task Forward</button>
                                        <button id="btnBulkUpdateThirdParty" class="btn btn-warning">Bulk Update</button>
                                    </div>
                                    <!-- Grid for Third Party Supply -->
                                    <div id="grid-ThirdPartySupply" class="kendo-grid"></div>
                                </div>

                                <!-- Fresh Water Tab -->
                                <div class="tab-pane fade" id="fresh-water">
                                    <!-- Button Group for Fresh Water -->
                                    <div class="mb-3">
                                        <button id="btnAddFreshWater" onclick="openChildModal('FreshWater')" class="btn btn-primary me-2">Add Fresh Water</button>
                                        <button id="btnCreateDebitNoteFreshWater" class="btn btn-secondary me-2">Create DebitNote</button>
                                        <button id="btnTaskForwardFreshWater" class="btn btn-info me-2">Task Forward</button>
                                        <button id="btnBulkUpdateFreshWater" class="btn btn-warning">Bulk Update</button>
                                    </div>
                                    <!-- Grid for Fresh Water -->
                                    <div id="grid-FreshWater" class="kendo-grid"></div>
                                </div>

                                <!-- Technicians Surveyors Tab -->
                                <div class="tab-pane fade" id="technicians-surveyors">
                                    <!-- Button Group for Technicians Surveyors -->
                                    <div class="mb-3 d-flex align-items-center flex-wrap">
                                        <button id="btnAddTechnicianSurveyor" onclick="openChildModal('TechnicianSurveyor')" class="btn btn-primary me-2">Add Technician Surveyor</button>
                                        <button id="btnCreateDebitNoteTechniciansSurveyors" onclick="openChildDebitNoteModal('TechniciansSurveyors')" class="btn btn-secondary me-2" disabled>Create DebitNote</button>
                                        <button id="btnTaskForwardTechniciansSurveyors" onclick="openChildTaskForwardModal('TechniciansSurveyors',12)" class="btn btn-info me-2" disabled>Task Forward</button>
                                        <button id="btnBulkUpdateTechniciansSurveyors" onclick="openChildBulkUpdateModal('TechniciansSurveyors',12)" class="btn btn-warning me-2" disabled>Bulk Update</button>

                                        <!-- Checkbox -->
                                        <div class="form-check me-2 mb-0">
                                            <input type="checkbox" id="isTechniciansSurveyorsDebitNoteNo" class="form-check-input" disabled>
                                            <label for="isTechniciansSurveyorsDebitNoteNo" class="form-check-label">Is Own DebitNote No.</label>
                                        </div>

                                        <!-- Input Box -->
                                        <input type="text" id="techniciansSurveyorsDebitNoteNo" class="form-control" placeholder="Enter Debit Note No." style="display: none; width: auto;" disabled>
                                    </div>
                                    <!-- Grid for Technicians Surveyors -->
                                    <div id="grid-TechniciansSurveyors" class="kendo-grid"></div>
                                </div>

                                <!-- Landing Items Tab -->
                                <div class="tab-pane fade" id="landing-items">
                                    <!-- Button Group for Landing Items -->
                                    <div class="mb-3 d-flex align-items-center flex-wrap">
                                        <button id="btnAddLandingItems" onclick="openChildModal('LandingItems')" class="btn btn-primary me-2">Add Landing Items</button>
                                        <button id="btnCreateDebitNoteLandingItems" onclick="openChildDebitNoteModal('LandingItems')" class="btn btn-secondary me-2" disabled>Create DebitNote</button>
                                        <button id="btnTaskForwardLandingItems" onclick="openChildTaskForwardModal('LandingItems',13)" class="btn btn-info me-2" disabled>Task Forward</button>
                                        <button id="btnBulkUpdateLandingItems" onclick="openChildBulkUpdateModal('LandingItems',13)" class="btn btn-warning me-2" disabled>Bulk Update</button>

                                        <!-- Checkbox -->
                                        <div class="form-check me-2 mb-0">
                                            <input type="checkbox" id="isLandingItemsDebitNoteNo" class="form-check-input" disabled>
                                            <label for="isLandingItemsDebitNoteNo" class="form-check-label">Is Own DebitNote No.</label>
                                        </div>

                                        <!-- Input Box -->
                                        <input type="text" id="landingItemsDebitNoteNo" class="form-control" placeholder="Enter Debit Note No." style="display: none; width: auto;" disabled>
                                    </div>
                                    <!-- Grid for Landing Items -->
                                    <div id="grid-LandingItem" class="kendo-grid"></div>
                                </div>

                                <!-- Other Service Tab -->
                                <div class="tab-pane fade" id="other-service">
                                    <!-- Button Group for Other Service -->
                                    <div class="mb-3 d-flex align-items-center flex-wrap">
                                        <button id="btnAddOtherService" onclick="openChildModal('OtherService')" class="btn btn-primary me-2">Add Other Service</button>
                                        <button id="btnCreateDebitNoteOtherService" onclick="openChildDebitNoteModal('OtherService')" class="btn btn-secondary me-2" disabled>Create DebitNote</button>
                                        <button id="btnTaskForwardOtherService" onclick="openChildTaskForwardModal('OtherService',14)" class="btn btn-info me-2" disabled>Task Forward</button>
                                        <button id="btnBulkUpdateOtherService" onclick="openChildBulkUpdateModal('OtherService',14)" class="btn btn-warning me-2" disabled>Bulk Update</button>

                                        <!-- Checkbox -->
                                        <div class="form-check me-2 mb-0">
                                            <input type="checkbox" id="isOtherServiceDebitNoteNo" class="form-check-input" disabled>
                                            <label for="isOtherServiceDebitNoteNo" class="form-check-label">Is Own DebitNote No.</label>
                                        </div>

                                        <!-- Input Box -->
                                        <input type="text" id="otherServiceDebitNoteNo" class="form-control" placeholder="Enter Debit Note No." style="display: none; width: auto;" disabled>
                                    </div>
                                    <!-- Grid for Other Service -->
                                    <div id="grid-OtherService" class="kendo-grid"></div>
                                </div>

                                <!-- Agency Remuneration Tab -->
                                <div class="tab-pane fade" id="agency-remuneration">
                                    <!-- Button Group for Agency Remuneration -->
                                    <div class="mb-3">
                                        <button id="btnAddAgencyRemuneration" onclick="openChildModal('AgencyRemuneration')" class="btn btn-primary me-2">Add Agency Remuneration</button>
                                        <button id="btnCreateDebitNoteAgency" class="btn btn-secondary me-2" disabled>Create DebitNote</button>
                                        <button id="btnTaskForwardAgency" class="btn btn-info me-2" disabled>Task Forward</button>
                                        <button id="btnBulkUpdateAgency" class="btn btn-warning" disabled>Bulk Update</button>
                                    </div>
                                    <!-- Grid for Agency Remuneration -->
                                    <div id="grid-AgencyRemuneration" class="kendo-grid"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let mulid = "";

    function scrollTabs(offset) {
        const tabs = document.getElementById('serviceTabs');
        tabs.scrollBy({ left: offset, behavior: 'smooth' });
    }

    function printDocument(type) {
        // Add your print logic based on document type
        switch (type) {
            case 'checklist':
                console.log('Printing Check List...');
                break;
            case 'purchaselist':
                console.log('Printing Purchase List...');
                break;
            case 'accountlist':
                console.log('Printing Account List...');
                break;
        }
    }

    function loadTaskJobOrderCounts(jobOrderId) {

        //let jobOrderId = $('#view_jobOrderId').val();

        $.ajax({
            url: '@Url.Action("GetTaskJobOrderCounts", "Job", new { area = "Project" })',
            type: 'GET',
            data: {
                searchString: '',
                companyId: companyId,
                jobOrderId: jobOrderId
            },
            success: function (counts) {

                $('#serviceTabs [data-status="PortExpense"] .badge').text(counts.portExpense);
                $('#serviceTabs [data-status="LaunchServices"] .badge').text(counts.launchServices);
                $('#serviceTabs [data-status="EquipmentsUsed"] .badge').text(counts.equipmentsUsed);
                $('#serviceTabs [data-status="CrewSignOn"] .badge').text(counts.crewSignOn);
                $('#serviceTabs [data-status="CrewSignOff"] .badge').text(counts.crewSignOff);
                $('#serviceTabs [data-status="CrewMiscellaneous"] .badge').text(counts.crewMiscellaneous);
                $('#serviceTabs [data-status="MedicalAssistance"] .badge').text(counts.medicalAssistance);
                $('#serviceTabs [data-status="ConsignmentImport"] .badge').text(counts.consignmentImport);
                $('#serviceTabs [data-status="ConsignmentExport"] .badge').text(counts.consignmentExport);
                $('#serviceTabs [data-status="ThirdPartySupply"] .badge').text(counts.thirdPartySupply);
                $('#serviceTabs [data-status="FreshWaterSupply"] .badge').text(counts.freshWaterSupply);
                $('#serviceTabs [data-status="TechniciansSurveyors"] .badge').text(counts.techniciansSurveyors);
                $('#serviceTabs [data-status="LandingItems"] .badge').text(counts.landingItems);
                $('#serviceTabs [data-status="OtherService"] .badge').text(counts.otherService);
                $('#serviceTabs [data-status="AgencyRemuneration"] .badge').text(counts.agencyRemuneration);
            },
            error: function (xhr, status, error) {
                console.error('Error loading status counts:', error);
            }
        });
    }

    function openChildViewJobOrderModal() {
        const modalId = `#addJobOrderModal`;
        const modalElement = $(modalId);

        $('#viewJobOrderModal').addClass('modal-blur');

        // Handle modal stacking
        modalElement.addClass('child-modal');
        modalElement.modal('show');

        // Load data
        let jobOrderId = $('#view_jobOrderId').val();
        let jobOrderNo = $('#view_jobOrderNo').text();
        let companyId = $('#view_companyId').val();
        openAddJobOrderModal(jobOrderId, jobOrderNo, companyId);
    }

    function openChildModal(serviceType) {
        const modalId = `#add${serviceType}Modal`;
        const modalElement = $(modalId);
        // Add blur to parent modal
        $('#viewJobOrderModal').addClass('modal-blur');

        // Handle modal stacking
        modalElement.addClass('child-modal');
        $('.modal-backdrop').addClass('child-modal-backdrop');

        modalElement.modal('show');

        let jobOrderId = $('#view_jobOrderId').val();
        let jobOrderNo = $('#view_jobOrderNo').text();
        let companyId = $('#companyId').val();

        const functionName = `open${serviceType}Modal`;
        if (typeof window[functionName] === 'function') {
            window[functionName](jobOrderId, jobOrderNo, 0, 'add');
        }
    }

    function openChildDebitNoteModal(serviceType) {
        const modalId = `#addDebitNoteModal`;
        const modalElement = $(modalId);

        // Add blur to parent modal
        $('#viewJobOrderModal').addClass('modal-blur');

        // Handle modal stacking
        modalElement.addClass('child-modal');
        $('.modal-backdrop').addClass('child-modal-backdrop');

        modalElement.modal('show');

        //let jobOrderId = $('#view_jobOrderId').val();
        //let jobOrderNo = $('#view_jobOrderNo').text();
        //let companyId = $('#companyId').val();

        //const functionName = `open${serviceType}Modal`;
        //if (typeof window[functionName] === 'function') {
        //    window[functionName](jobOrderId, jobOrderNo, 0, 'add');
        //}
    }

    function openChildTaskForwardModal(serviceType, taskId) {

        const modalId = `#addTaskForwardModal`;
        const modalElement = $(modalId);

        if (mulid != '') {

            $('#viewJobOrderModal').addClass('modal-blur');
            modalElement.addClass('child-modal');
            $('.modal-backdrop').addClass('child-modal-backdrop');
            modalElement.modal('show');

            let companyId = $('#companyId').val();
            let customerId = $('#customerId').val();
            let jobOrderId = $('#view_jobOrderId').val();

            openTaskForwardModal(serviceType, taskId, customerId, jobOrderId, mulid);

        } else {
            toastr.warning('Please select at least one row from table');
        }
    }

    function openChildBulkUpdateModal(serviceType, taskId) {

        const modalId = `#bulkUpdateModal`;
        const modalElement = $(modalId);
        modalElement.modal('show');
    }

    document.addEventListener('DOMContentLoaded', function () {
        const isDebitNoteNoCheckbox = document.getElementById('isPortExpenseDebitNoteNo');
        const debitNoteNoInput = document.getElementById('portExpensedebitNoteNo');

        // Toggle visibility of input box based on checkbox
        isDebitNoteNoCheckbox.addEventListener('change', function () {
            debitNoteNoInput.style.display = this.checked ? 'block' : 'none';
        });
    });

    function openDebitNoteModal(jobOrderId, debitNoteId) {
        if (parseInt(jobOrderId) && parseInt(debitNoteId)) {
            // Proceed with opening the modal
            console.log("Valid IDs, opening modal...");
        } else {
            console.log("Invalid IDs, please check.");
        }
    }

    function openpurchaseExpenseModal(jobOrderId, jobOrderNo, portExpenseId, taskId) {
        debugger;
        if (parseInt(jobOrderId) && parseInt(portExpenseId)) {
            const modalId = `#viewPurchaseModal`;
            const modalElement = $(modalId);
            modalElement.modal('show');

            console.log("Valid IDs, opening modal...");
        } else {
            console.log("Invalid IDs, please check.");
        }
    }

    // ================== PORT EXPENSES GRID ================== //
    function initializePortExpenseGrid() {

        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("PortExpensesList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "200px",
                    headerTemplate: '<input type="checkbox" id="selectAllDebitNotes" onclick="toggleSelectAllPortExpense(this)" />',
                    template: function (dataItem) {
                        // Define a common style for equal height, width, and gap
                        let commonStyle = 'style="margin-right:5px; vertical-align: middle;"';

                        // Row checkbox with common style
                        let rowCheckbox = `<input type="checkbox" class="ps-0 border-0 bg-transparent selectDebitNote" ${commonStyle} data-portExpenseId="${dataItem.portExpenseId}"  onclick="updateSelectedPortExpense(this, '${dataItem.jobOrderId}','${dataItem.portExpenseId}')" />`;

                        // Action buttons with common style; applying the style to both button and its icon for proper alignment.
                        let buttons = `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.portExpenseId}','${dataItem.debitNoteId}', 'view')">
        <i class="material-symbols-outlined text-primary">visibility</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.portExpenseId}','${dataItem.debitNoteId}', 'edit')">
        <i class="material-symbols-outlined text-warning" >edit</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="deletePortExpense('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.portExpenseId}','${dataItem.debitNoteId}')">
        <i class="material-symbols-outlined text-danger" >delete</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openpurchaseExpenseModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.portExpenseId}','${dataItem.taskId}')">
        <i class="material-symbols-outlined" >universal_currency_alt</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openDebitNoteModal('${dataItem.jobOrderId}','${dataItem.debitNoteId}')">
        <i class="material-symbols-outlined" >payments</i>
    </button>`;

                        return rowCheckbox + buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "supplierName", title: "Supplier Name", width: "200px" },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                {
                    field: "deliverDate",
                    title: "Deliver Date",
                    width: "120px",
                    template: function (dataItem) {
                        var date = new Date(dataItem.deliverDate);
                        return kendo.toString(date, "dd/MM/yyyy");
                    }
                },
                { field: "uomName", title: "Uom Name", width: "120px" },
                { field: "quantity", title: "Quantity", width: "100px" },
               
                { field: "remarks", title: "Remarks", width: "200px" },
                {
                    field: "isActive",
                    title: "Active",
                    width: "80px",
                    template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />'
                }
            ];

            let grid = $("#grid-PortExpense").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn’t exist
                initializeKendoGridWithoutPaging("grid-PortExpense", url, { searchString, companyId, jobOrderId }, columns);
            }

            loadTaskJobOrderCounts(jobOrderId);
        }
    }

    function updateSelectedPortExpense(checkbox, jobOrderId, portExpenseId) {

        if (checkbox.checked) {
            // Add the portExpenseId to mulid if checked
            if (!mulid.includes(portExpenseId)) {
                mulid += mulid.length > 0 ? `,${portExpenseId}` : portExpenseId;
            }
        } else {
            // Remove the portExpenseId from mulid if unchecked
            let idsArray = mulid.split(",").filter(id => id !== portExpenseId);
            mulid = idsArray.join(",");
        }
        console.log("Updated mulid:", mulid);

        // Call function to update button states
        updateButtonStates();
    }

    function toggleSelectAllPortExpense(headerCheckbox) {

        let checked = headerCheckbox.checked;
        mulid = ""; // Reset mulid when toggling "Select All"

        document.querySelectorAll(".selectDebitNote").forEach(function (checkbox) {
            checkbox.checked = checked;

            // If checked, add all portExpenseIds to mulid
            if (checked) {
                let portExpenseId = checkbox.getAttribute("data-portExpenseId");
                if (portExpenseId) {
                    mulid += mulid.length > 0 ? `,${portExpenseId}` : portExpenseId;
                }
            }
        });

        console.log("Final mulid after toggleSelectAll:", mulid);

        // Call function to update button states
        updateButtonStates();
    }

    function updateButtonStates() {
        // Check if any .selectDebitNote checkbox is selected
        let anySelected = document.querySelectorAll(".selectDebitNote:checked").length > 0;

        // Check the state of the isPortExpenseDebitNoteNo checkbox
        let isDebitNoteChecked = document.getElementById("isPortExpenseDebitNoteNo").checked;

        // Enable or disable buttons based on both conditions
        let enableButtons = anySelected || isDebitNoteChecked;

        document.getElementById("btnCreateDebitNotePortExpense").disabled = !enableButtons;
        document.getElementById("btnTaskForwardPortExpense").disabled = !enableButtons;
        document.getElementById("btnBulkUpdatePortExpense").disabled = !enableButtons;
    }

    // ================== LAUNCH SERVICES GRID ================== //
    function initializeLaunchServicesGrid() {
        debugger;
        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("LaunchServicesList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "200px",
                    headerTemplate: '<input type="checkbox" id="selectAllDebitNotes" onclick="toggleSelectAllLaunchServices(this)" />',
                    template: function (dataItem) {
                        // Define a common style for equal height, width, and gap
                        let commonStyle = 'style="margin-right:5px; vertical-align: middle;"';

                        // Row checkbox with common style
                        let rowCheckbox = `<input type="checkbox" class="ps-0 border-0 bg-transparent selectDebitNote" ${commonStyle} data-portExpenseId="${dataItem.portExpenseId}"  onclick="updateSelectedLaunchServices(this, '${dataItem.jobOrderId}','${dataItem.portExpenseId}')" />`;

                        // Action buttons with common style; applying the style to both button and its icon for proper alignment.
                        let buttons = `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openLaunchServicesModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.portExpenseId}','${dataItem.debitNoteId}', 'view')">
     <i class="material-symbols-outlined text-primary">visibility</i>
 </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openLaunchServicesModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.portExpenseId}','${dataItem.debitNoteId}', 'edit')">
     <i class="material-symbols-outlined text-warning" >edit</i>
 </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="deleteLaunchServices('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.portExpenseId}','${dataItem.debitNoteId}')">
     <i class="material-symbols-outlined text-danger" >delete</i>
 </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openpurchaseExpenseModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.portExpenseId}','${dataItem.taskId}')">
     <i class="material-symbols-outlined" >universal_currency_alt</i>
 </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openDebitNoteModal('${dataItem.jobOrderId}','${dataItem.debitNoteId}')">
     <i class="material-symbols-outlined" >payments</i>
 </button>`;

                        return rowCheckbox + buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                {
                    field: "launchServiceDate",
                    title: "Launch Service Date",
                    width: "120px",
                    template: function (dataItem) {
                        var date = new Date(dataItem.launchServiceDate);
                        return kendo.toString(date, "dd/MM/yyyy");
                    }
                },
                { field: "uomName", title: "Uom Name", width: "120px" },
                { field: "quantity", title: "Quantity", width: "100px" },
                { field: "remarks", title: "Remarks", width: "200px" },
                {
                    field: "isActive",
                    title: "Active",
                    width: "80px",
                    template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />'
                }
            ];

            let grid = $("#grid-LaunchService").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn’t exist
                initializeKendoGridWithoutPaging("grid-LaunchService", url, { searchString, companyId, jobOrderId }, columns);
            }

            loadTaskJobOrderCounts(jobOrderId);
        }
    }

    function updateSelectedLaunchServices(checkbox, jobOrderId, portExpenseId) {

        if (checkbox.checked) {
            // Add the portExpenseId to mulid if checked
            if (!mulid.includes(portExpenseId)) {
                mulid += mulid.length > 0 ? `,${portExpenseId}` : portExpenseId;
            }
        } else {
            // Remove the portExpenseId from mulid if unchecked
            let idsArray = mulid.split(",").filter(id => id !== portExpenseId);
            mulid = idsArray.join(",");
        }
        console.log("Updated mulid:", mulid);

        // Call function to update button states
        updateButtonStates();
    }

    function toggleSelectAllLaunchServices(headerCheckbox) {

        let checked = headerCheckbox.checked;
        mulid = ""; // Reset mulid when toggling "Select All"

        document.querySelectorAll(".selectDebitNote").forEach(function (checkbox) {
            checkbox.checked = checked;

            // If checked, add all portExpenseIds to mulid
            if (checked) {
                let portExpenseId = checkbox.getAttribute("data-portExpenseId");
                if (portExpenseId) {
                    mulid += mulid.length > 0 ? `,${portExpenseId}` : portExpenseId;
                }
            }
        });

        console.log("Final mulid after toggleSelectAll:", mulid);

        // Call function to update button states
        updateButtonStates();
    }

    function updateButtonStates() {
        // Check if any .selectDebitNote checkbox is selected
        let anySelected = document.querySelectorAll(".selectDebitNote:checked").length > 0;

        // Check the state of the isLaunchServicesDebitNoteNo checkbox
        let isDebitNoteChecked = document.getElementById("isLaunchServicesDebitNoteNo").checked;

        // Enable or disable buttons based on both conditions
        let enableButtons = anySelected || isDebitNoteChecked;

        document.getElementById("btnCreateDebitNoteLaunchServices").disabled = !enableButtons;
        document.getElementById("btnTaskForwardLaunchServices").disabled = !enableButtons;
        document.getElementById("btnBulkUpdateLaunchServices").disabled = !enableButtons;
    }

    // ================== EQUIPMENT USED GRID ================== //
    function initializeEquipmentUsedGrid() {

        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("EquipmentUsedList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "100px",
                    template: function (dataItem) {
                        let buttons = `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'view')">
    <i class="material-symbols-outlined text-primary">visibility</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'edit')">
    <i class="material-symbols-outlined text-warning">edit</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="deletePortExpense('${dataItem.jobOrderId}','${dataItem.portExpenseId}')">
    <i class="material-symbols-outlined text-danger">delete</i></button>`;

                        return buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "jobOrderNo", title: "Job Order No", width: "150px" },
                { field: "supplierName", title: "Supplier Name", width: "200px" },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                { field: "uomName", title: "Uom Name", width: "120px" },
                { field: "quantity", title: "Quantity", width: "100px" },
               
                { field: "remarks", title: "Remarks", width: "200px" },
                { field: "isActive", title: "Active", width: "80px", template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />' }
            ];

            let grid = $("#grid-EquipmentUsed").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn’t exist
                initializeKendoGrid("grid-EquipmentUsed", url, { searchString, companyId, jobOrderId }, columns);
            }
        }
    }

    // ================== CREW SIGN-ON GRID ================== //
    function initializeCrewSignOnGrid() {

        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("CrewSignOnList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "100px",
                    template: function (dataItem) {
                        let buttons = `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'view')">
    <i class="material-symbols-outlined text-primary">visibility</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'edit')">
    <i class="material-symbols-outlined text-warning">edit</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="deletePortExpense('${dataItem.jobOrderId}','${dataItem.portExpenseId}')">
    <i class="material-symbols-outlined text-danger">delete</i></button>`;

                        return buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "jobOrderNo", title: "Job Order No", width: "150px" },
                { field: "supplierName", title: "Supplier Name", width: "200px" },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                { field: "uomName", title: "Uom Name", width: "120px" },
                { field: "quantity", title: "Quantity", width: "100px" },
               
                { field: "remarks", title: "Remarks", width: "200px" },
                { field: "isActive", title: "Active", width: "80px", template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />' }
            ];

            let grid = $("#grid-CrewSignOn").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn’t exist
                initializeKendoGrid("grid-CrewSignOn", url, { searchString, companyId, jobOrderId }, columns);
            }
        }
    }

    // ================== CREW SIGN-OFF GRID ================== //
    function initializeCrewSignOffGrid() {

        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("CrewSignOffList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "100px",
                    template: function (dataItem) {
                        let buttons = `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'view')">
    <i class="material-symbols-outlined text-primary">visibility</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'edit')">
    <i class="material-symbols-outlined text-warning">edit</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="deletePortExpense('${dataItem.jobOrderId}','${dataItem.portExpenseId}')">
    <i class="material-symbols-outlined text-danger">delete</i></button>`;

                        return buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "jobOrderNo", title: "Job Order No", width: "150px" },
                { field: "supplierName", title: "Supplier Name", width: "200px" },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                { field: "uomName", title: "Uom Name", width: "120px" },
                { field: "quantity", title: "Quantity", width: "100px" },
               
                { field: "remarks", title: "Remarks", width: "200px" },
                { field: "isActive", title: "Active", width: "80px", template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />' }
            ];

            let grid = $("#grid-CrewSignOff").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn’t exist
                initializeKendoGrid("grid-CrewSignOff", url, { searchString, companyId, jobOrderId }, columns);
            }
        }
    }

    // ================== CRE MISCELLANEOUS GRID ================== //
    function initializeCrewMiscGrid() {

        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("CrewMiscList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "100px",
                    template: function (dataItem) {
                        let buttons = `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'view')">
    <i class="material-symbols-outlined text-primary">visibility</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'edit')">
    <i class="material-symbols-outlined text-warning">edit</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="deletePortExpense('${dataItem.jobOrderId}','${dataItem.portExpenseId}')">
    <i class="material-symbols-outlined text-danger">delete</i></button>`;

                        return buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "jobOrderNo", title: "Job Order No", width: "150px" },
                { field: "supplierName", title: "Supplier Name", width: "200px" },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                { field: "uomName", title: "Uom Name", width: "120px" },
                { field: "quantity", title: "Quantity", width: "100px" },
               
                { field: "remarks", title: "Remarks", width: "200px" },
                { field: "isActive", title: "Active", width: "80px", template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />' }
            ];

            let grid = $("#grid-CrewMisc").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn’t exist
                initializeKendoGrid("grid-CrewMisc", url, { searchString, companyId, jobOrderId }, columns);
            }
        }
    }

    // ================== MEDICAL ASSISTANCE GRID ================== //
    function initializeMedicalAssistanceGrid() {

        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("MedicalAssistanceList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "100px",
                    template: function (dataItem) {
                        let buttons = `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'view')">
    <i class="material-symbols-outlined text-primary">visibility</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'edit')">
    <i class="material-symbols-outlined text-warning">edit</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="deletePortExpense('${dataItem.jobOrderId}','${dataItem.portExpenseId}')">
    <i class="material-symbols-outlined text-danger">delete</i></button>`;

                        return buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "jobOrderNo", title: "Job Order No", width: "150px" },
                { field: "supplierName", title: "Supplier Name", width: "200px" },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                { field: "uomName", title: "Uom Name", width: "120px" },
                { field: "quantity", title: "Quantity", width: "100px" },
               
                { field: "remarks", title: "Remarks", width: "200px" },
                { field: "isActive", title: "Active", width: "80px", template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />' }
            ];

            let grid = $("#grid-MedicalAssistance").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn’t exist
                initializeKendoGrid("grid-MedicalAssistance", url, { searchString, companyId, jobOrderId }, columns);
            }
        }
    }

    // ================== CONSIGNMENT IMPORT GRID ================== //
    function initializeConsignmentImportGrid() {
        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("ConsignmentImportList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "200px",
                    headerTemplate: '<input type="checkbox" id="selectAllConsignmentImport" onclick="toggleSelectAllConsignmentImport(this)" />',
                    template: function (dataItem) {
                        // Define a common style for equal height, width, and gap
                        let commonStyle = 'style="margin-right:5px; vertical-align: middle;"';

                        // Row checkbox with common style
                        let rowCheckbox = `<input type="checkbox" class="ps-0 border-0 bg-transparent selectConsignmentImport" ${commonStyle} data-consignmentImportId="${dataItem.consignmentImportId}"  onclick="updateSelectedConsignmentImport(this, '${dataItem.jobOrderId}','${dataItem.consignmentImportId}')" />`;

                        // Action buttons with common style
                        let buttons = `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openConsignmentImportModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.consignmentImportId}','${dataItem.debitNoteId}', 'view')">
        <i class="material-symbols-outlined text-primary">visibility</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openConsignmentImportModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.consignmentImportId}','${dataItem.debitNoteId}', 'edit')">
        <i class="material-symbols-outlined text-warning" >edit</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="deleteConsignmentImport('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.consignmentImportId}','${dataItem.debitNoteId}')">
        <i class="material-symbols-outlined text-danger" >delete</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openpurchaseExpenseModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.consignmentImportId}','${dataItem.taskId}')">
        <i class="material-symbols-outlined" >universal_currency_alt</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openDebitNoteModal('${dataItem.jobOrderId}','${dataItem.debitNoteId}')">
        <i class="material-symbols-outlined" >payments</i>
    </button>`;

                        return rowCheckbox + buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "consignmentNo", title: "Consignment No.", width: "150px" },
                { field: "cargoTypeName", title: "Cargo Type", width: "150px" },
                { field: "uomName", title: "UOM", width: "100px" },
                { field: "quantity", title: "Quantity", width: "100px" },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                { field: "totAmt", title: "Total Amount", width: "100px" },
                { field: "gstAmt", title: "GST Amount", width: "100px" },
                { field: "totAmtAftGst", title: "Total After GST", width: "120px" },
                { field: "remarks", title: "Remarks", width: "200px" },
                {
                    field: "isActive",
                    title: "Active",
                    width: "80px",
                    template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />'
                }
            ];

            let grid = $("#grid-ConsignmentImport").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn't exist
                initializeKendoGridWithoutPaging("grid-ConsignmentImport", url, { searchString, companyId, jobOrderId }, columns);
            }

            loadTaskJobOrderCounts(jobOrderId);
        }
    }

    function updateSelectedConsignmentImport(checkbox, jobOrderId, consignmentImportId) {
        if (checkbox.checked) {
            // Add the consignmentImportId to mulid if checked
            if (!mulid.includes(consignmentImportId)) {
                mulid += mulid.length > 0 ? `,${consignmentImportId}` : consignmentImportId;
            }
        } else {
            // Remove the consignmentImportId from mulid if unchecked
            let idsArray = mulid.split(",").filter(id => id !== consignmentImportId);
            mulid = idsArray.join(",");
        }
        
        // Call function to update button states
        updateConsignmentImportButtonStates();
    }

    function toggleSelectAllConsignmentImport(headerCheckbox) {
        let checked = headerCheckbox.checked;
        mulid = ""; // Reset mulid when toggling "Select All"

        document.querySelectorAll(".selectConsignmentImport").forEach(function (checkbox) {
            checkbox.checked = checked;

            // If checked, add all consignmentImportIds to mulid
            if (checked) {
                let consignmentImportId = checkbox.getAttribute("data-consignmentImportId");
                if (consignmentImportId) {
                    mulid += mulid.length > 0 ? `,${consignmentImportId}` : consignmentImportId;
                }
            }
        });

        // Call function to update button states
        updateConsignmentImportButtonStates();
    }

    function updateConsignmentImportButtonStates() {
        // Check if any selectConsignmentImport checkbox is selected
        let anySelected = document.querySelectorAll(".selectConsignmentImport:checked").length > 0;

        // Enable or disable buttons based on selection
        document.getElementById("btnCreateDebitNoteConsignmentImport").disabled = !anySelected;
        document.getElementById("btnTaskForwardConsignmentImport").disabled = !anySelected;
        document.getElementById("btnBulkUpdateConsignmentImport").disabled = !anySelected;
    }

    // ================== CONSIGNMENT EXPORT GRID ================== //
    function initializeConsignmentExportGrid() {
        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("ConsignmentExportList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "200px",
                    headerTemplate: '<input type="checkbox" id="selectAllConsignmentExport" onclick="toggleSelectAllConsignmentExport(this)" />',
                    template: function (dataItem) {
                        // Define a common style for equal height, width, and gap
                        let commonStyle = 'style="margin-right:5px; vertical-align: middle;"';

                        // Row checkbox with common style
                        let rowCheckbox = `<input type="checkbox" class="ps-0 border-0 bg-transparent selectConsignmentExport" ${commonStyle} data-consignmentExportId="${dataItem.consignmentExportId}"  onclick="updateSelectedConsignmentExport(this, '${dataItem.jobOrderId}','${dataItem.consignmentExportId}')" />`;

                        // Action buttons with common style
                        let buttons = `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openConsignmentExportModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.consignmentExportId}','${dataItem.debitNoteId}', 'view')">
        <i class="material-symbols-outlined text-primary">visibility</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openConsignmentExportModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.consignmentExportId}','${dataItem.debitNoteId}', 'edit')">
        <i class="material-symbols-outlined text-warning" >edit</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="deleteConsignmentExport('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.consignmentExportId}','${dataItem.debitNoteId}')">
        <i class="material-symbols-outlined text-danger" >delete</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openpurchaseExpenseModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.consignmentExportId}','${dataItem.taskId}')">
        <i class="material-symbols-outlined" >universal_currency_alt</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openDebitNoteModal('${dataItem.jobOrderId}','${dataItem.debitNoteId}')">
        <i class="material-symbols-outlined" >payments</i>
    </button>`;

                        return rowCheckbox + buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "consignmentNo", title: "Consignment No.", width: "150px" },
                { field: "cargoTypeName", title: "Cargo Type", width: "150px" },
                { field: "uomName", title: "UOM", width: "100px" },
                { field: "quantity", title: "Quantity", width: "100px" },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                { field: "totAmt", title: "Total Amount", width: "100px" },
                { field: "gstAmt", title: "GST Amount", width: "100px" },
                { field: "totAmtAftGst", title: "Total After GST", width: "120px" },
                { field: "remarks", title: "Remarks", width: "200px" },
                {
                    field: "isActive",
                    title: "Active",
                    width: "80px",
                    template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />'
                }
            ];

            let grid = $("#grid-ConsignmentExport").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn't exist
                initializeKendoGridWithoutPaging("grid-ConsignmentExport", url, { searchString, companyId, jobOrderId }, columns);
            }

            loadTaskJobOrderCounts(jobOrderId);
        }
    }

    function updateSelectedConsignmentExport(checkbox, jobOrderId, consignmentExportId) {
        if (checkbox.checked) {
            // Add the consignmentExportId to mulid if checked
            if (!mulid.includes(consignmentExportId)) {
                mulid += mulid.length > 0 ? `,${consignmentExportId}` : consignmentExportId;
            }
        } else {
            // Remove the consignmentExportId from mulid if unchecked
            let idsArray = mulid.split(",").filter(id => id !== consignmentExportId);
            mulid = idsArray.join(",");
        }
        
        // Call function to update button states
        updateConsignmentExportButtonStates();
    }

    function toggleSelectAllConsignmentExport(headerCheckbox) {
        let checked = headerCheckbox.checked;
        mulid = ""; // Reset mulid when toggling "Select All"

        document.querySelectorAll(".selectConsignmentExport").forEach(function (checkbox) {
            checkbox.checked = checked;

            // If checked, add all consignmentExportIds to mulid
            if (checked) {
                let consignmentExportId = checkbox.getAttribute("data-consignmentExportId");
                if (consignmentExportId) {
                    mulid += mulid.length > 0 ? `,${consignmentExportId}` : consignmentExportId;
                }
            }
        });

        // Call function to update button states
        updateConsignmentExportButtonStates();
    }

    function updateConsignmentExportButtonStates() {
        // Check if any selectConsignmentExport checkbox is selected
        let anySelected = document.querySelectorAll(".selectConsignmentExport:checked").length > 0;

        // Enable or disable buttons based on selection
        document.getElementById("btnCreateDebitNoteConsignmentExport").disabled = !anySelected;
        document.getElementById("btnTaskForwardConsignmentExport").disabled = !anySelected;
        document.getElementById("btnBulkUpdateConsignmentExport").disabled = !anySelected;
    }

    // ================== THIRD PARTY SUPPLY GRID ================== //
    function initializeThirdPartySupplyGrid() {

        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("ThirdPartySupplyList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "100px",
                    template: function (dataItem) {
                        let buttons = `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'view')">
    <i class="material-symbols-outlined text-primary">visibility</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'edit')">
    <i class="material-symbols-outlined text-warning">edit</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="deletePortExpense('${dataItem.jobOrderId}','${dataItem.portExpenseId}')">
    <i class="material-symbols-outlined text-danger">delete</i></button>`;

                        return buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "jobOrderNo", title: "Job Order No", width: "150px" },
                { field: "supplierName", title: "Supplier Name", width: "200px" },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                { field: "uomName", title: "Uom Name", width: "120px" },
                { field: "quantity", title: "Quantity", width: "100px" },
               
                { field: "remarks", title: "Remarks", width: "200px" },
                { field: "isActive", title: "Active", width: "80px", template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />' }
            ];

            let grid = $("#grid-ThirdPartySupply").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn’t exist
                initializeKendoGrid("grid-ThirdPartySupply", url, { searchString, companyId, jobOrderId }, columns);
            }
        }
    }

    // ================== FRESH WATER GRID ================== //
    function initializeFreshWaterGrid() {

        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("FreshWaterList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "100px",
                    template: function (dataItem) {
                        let buttons = `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'view')">
    <i class="material-symbols-outlined text-primary">visibility</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'edit')">
    <i class="material-symbols-outlined text-warning">edit</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="deletePortExpense('${dataItem.jobOrderId}','${dataItem.portExpenseId}')">
    <i class="material-symbols-outlined text-danger">delete</i></button>`;

                        return buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "jobOrderNo", title: "Job Order No", width: "150px" },
                { field: "supplierName", title: "Supplier Name", width: "200px" },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                { field: "uomName", title: "Uom Name", width: "120px" },
                { field: "quantity", title: "Quantity", width: "100px" },
               
                { field: "remarks", title: "Remarks", width: "200px" },
                { field: "isActive", title: "Active", width: "80px", template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />' }
            ];

            let grid = $("#grid-FreshWater").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn’t exist
                initializeKendoGrid("grid-FreshWater", url, { searchString, companyId, jobOrderId }, columns);
            }
        }
    }

    // ================== TECHNICIAN SURVEYOR GRID ================== //
    function initializeTechnicianSurveyorGrid() {

        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("TechnicianSurveyorList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "100px",
                    template: function (dataItem) {
                        let buttons = `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'view')">
    <i class="material-symbols-outlined text-primary">visibility</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'edit')">
    <i class="material-symbols-outlined text-warning">edit</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="deletePortExpense('${dataItem.jobOrderId}','${dataItem.portExpenseId}')">
    <i class="material-symbols-outlined text-danger">delete</i></button>`;

                        return buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "jobOrderNo", title: "Job Order No", width: "150px" },
                { field: "supplierName", title: "Supplier Name", width: "200px" },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                { field: "uomName", title: "Uom Name", width: "120px" },
                { field: "quantity", title: "Quantity", width: "100px" },
               
                { field: "remarks", title: "Remarks", width: "200px" },
                { field: "isActive", title: "Active", width: "80px", template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />' }
            ];

            let grid = $("#grid-TechnicianSurveyor").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn’t exist
                initializeKendoGrid("grid-TechnicianSurveyor", url, { searchString, companyId, jobOrderId }, columns);
            }
        }
    }

    // ================== TECHNICIANS SURVEYORS GRID ================== //
    function initializeTechniciansSurveyorsGrid() {
        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("TechniciansSurveyorsList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "200px",
                    headerTemplate: '<input type="checkbox" id="selectAllTechniciansSurveyors" onclick="toggleSelectAllTechniciansSurveyors(this)" />',
                    template: function (dataItem) {
                        // Define a common style for equal height, width, and gap
                        let commonStyle = 'style="margin-right:5px; vertical-align: middle;"';

                        // Row checkbox with common style
                        let rowCheckbox = `<input type="checkbox" class="ps-0 border-0 bg-transparent selectTechniciansSurveyors" ${commonStyle} data-technicianSurveyorId="${dataItem.technicianSurveyorId}"  onclick="updateSelectedTechniciansSurveyors(this, '${dataItem.jobOrderId}','${dataItem.technicianSurveyorId}')" />`;

                        // Action buttons with common style
                        let buttons = `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openTechniciansSurveyorsModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.technicianSurveyorId}','${dataItem.debitNoteId}', 'view')">
        <i class="material-symbols-outlined text-primary">visibility</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openTechniciansSurveyorsModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.technicianSurveyorId}','${dataItem.debitNoteId}', 'edit')">
        <i class="material-symbols-outlined text-warning" >edit</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="deleteTechniciansSurveyors('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.technicianSurveyorId}','${dataItem.debitNoteId}')">
        <i class="material-symbols-outlined text-danger" >delete</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openpurchaseExpenseModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.technicianSurveyorId}','${dataItem.taskId}')">
        <i class="material-symbols-outlined" >universal_currency_alt</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openDebitNoteModal('${dataItem.jobOrderId}','${dataItem.debitNoteId}')">
        <i class="material-symbols-outlined" >payments</i>
    </button>`;

                        return rowCheckbox + buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "personName", title: "Person Name", width: "200px" },
                {
                    field: "serviceDate",
                    title: "Service Date",
                    width: "120px",
                    template: function (dataItem) {
                        if (dataItem.serviceDate) {
                            var date = new Date(dataItem.serviceDate);
                            return kendo.toString(date, "dd/MM/yyyy");
                        }
                        return "";
                    }
                },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                { field: "totAmt", title: "Total Amount", width: "100px" },
                { field: "gstAmt", title: "GST Amount", width: "100px" },
                { field: "totAmtAftGst", title: "Total After GST", width: "120px" },
                { field: "remarks", title: "Remarks", width: "200px" },
                {
                    field: "isActive",
                    title: "Active",
                    width: "80px",
                    template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />'
                }
            ];

            let grid = $("#grid-TechniciansSurveyors").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn't exist
                initializeKendoGridWithoutPaging("grid-TechniciansSurveyors", url, { searchString, companyId, jobOrderId }, columns);
            }

            loadTaskJobOrderCounts(jobOrderId);
        }
    }

    function updateSelectedTechniciansSurveyors(checkbox, jobOrderId, technicianSurveyorId) {
        if (checkbox.checked) {
            // Add the technicianSurveyorId to mulid if checked
            if (!mulid.includes(technicianSurveyorId)) {
                mulid += mulid.length > 0 ? `,${technicianSurveyorId}` : technicianSurveyorId;
            }
        } else {
            // Remove the technicianSurveyorId from mulid if unchecked
            let idsArray = mulid.split(",").filter(id => id !== technicianSurveyorId);
            mulid = idsArray.join(",");
        }
        
        // Call function to update button states
        updateTechniciansSurveyorsButtonStates();
    }

    function toggleSelectAllTechniciansSurveyors(headerCheckbox) {
        let checked = headerCheckbox.checked;
        mulid = ""; // Reset mulid when toggling "Select All"

        document.querySelectorAll(".selectTechniciansSurveyors").forEach(function (checkbox) {
            checkbox.checked = checked;

            // If checked, add all technicianSurveyorIds to mulid
            if (checked) {
                let technicianSurveyorId = checkbox.getAttribute("data-technicianSurveyorId");
                if (technicianSurveyorId) {
                    mulid += mulid.length > 0 ? `,${technicianSurveyorId}` : technicianSurveyorId;
                }
            }
        });

        // Call function to update button states
        updateTechniciansSurveyorsButtonStates();
    }

    function updateTechniciansSurveyorsButtonStates() {
        // Check if any selectTechniciansSurveyors checkbox is selected
        let anySelected = document.querySelectorAll(".selectTechniciansSurveyors:checked").length > 0;

        // Enable or disable buttons based on selection
        document.getElementById("btnCreateDebitNoteTechniciansSurveyors").disabled = !anySelected;
        document.getElementById("btnTaskForwardTechniciansSurveyors").disabled = !anySelected;
        document.getElementById("btnBulkUpdateTechniciansSurveyors").disabled = !anySelected;
    }

    // ================== LANDING ITEM GRID ================== //
    function initializeLandingItemGrid() {

        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("LandingItemList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "100px",
                    template: function (dataItem) {
                        let buttons = `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'view')">
    <i class="material-symbols-outlined text-primary">visibility</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="openPortExpenseModal('${dataItem.jobOrderId}','${dataItem.portExpenseId}', 'edit')">
    <i class="material-symbols-outlined text-warning">edit</i></button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" onclick="deletePortExpense('${dataItem.jobOrderId}','${dataItem.portExpenseId}')">
    <i class="material-symbols-outlined text-danger">delete</i></button>`;

                        return buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "jobOrderNo", title: "Job Order No", width: "150px" },
                { field: "supplierName", title: "Supplier Name", width: "200px" },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                { field: "uomName", title: "Uom Name", width: "120px" },
                { field: "quantity", title: "Quantity", width: "100px" },
               
                { field: "remarks", title: "Remarks", width: "200px" },
                { field: "isActive", title: "Active", width: "80px", template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />' }
            ];

            let grid = $("#grid-LandingItem").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn’t exist
                initializeKendoGrid("grid-LandingItem", url, { searchString, companyId, jobOrderId }, columns);
            }
        }
    }

    // ================== LANDING ITEMS GRID ================== //
    function initializeLandingItemsGrid() {
        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("LandingItemsList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "200px",
                    headerTemplate: '<input type="checkbox" id="selectAllLandingItems" onclick="toggleSelectAllLandingItems(this)" />',
                    template: function (dataItem) {
                        // Define a common style for equal height, width, and gap
                        let commonStyle = 'style="margin-right:5px; vertical-align: middle;"';

                        // Row checkbox with common style
                        let rowCheckbox = `<input type="checkbox" class="ps-0 border-0 bg-transparent selectLandingItems" ${commonStyle} data-landingItemId="${dataItem.landingItemId}"  onclick="updateSelectedLandingItems(this, '${dataItem.jobOrderId}','${dataItem.landingItemId}')" />`;

                        // Action buttons with common style
                        let buttons = `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openLandingItemsModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.landingItemId}','${dataItem.debitNoteId}', 'view')">
        <i class="material-symbols-outlined text-primary">visibility</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openLandingItemsModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.landingItemId}','${dataItem.debitNoteId}', 'edit')">
        <i class="material-symbols-outlined text-warning" >edit</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="deleteLandingItems('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.landingItemId}','${dataItem.debitNoteId}')">
        <i class="material-symbols-outlined text-danger" >delete</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openpurchaseExpenseModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.landingItemId}','${dataItem.taskId}')">
        <i class="material-symbols-outlined" >universal_currency_alt</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openDebitNoteModal('${dataItem.jobOrderId}','${dataItem.debitNoteId}')">
        <i class="material-symbols-outlined" >payments</i>
    </button>`;

                        return rowCheckbox + buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "itemName", title: "Item Name", width: "150px" },
                { field: "uomName", title: "UOM", width: "100px" },
                { field: "quantity", title: "Quantity", width: "100px" },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                {
                    field: "deliveryDate",
                    title: "Delivery Date",
                    width: "120px",
                    template: function (dataItem) {
                        if (dataItem.deliveryDate) {
                            var date = new Date(dataItem.deliveryDate);
                            return kendo.toString(date, "dd/MM/yyyy");
                        }
                        return "";
                    }
                },
                { field: "totAmt", title: "Total Amount", width: "100px" },
                { field: "gstAmt", title: "GST Amount", width: "100px" },
                { field: "totAmtAftGst", title: "Total After GST", width: "120px" },
                { field: "remarks", title: "Remarks", width: "200px" },
                {
                    field: "isActive",
                    title: "Active",
                    width: "80px",
                    template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />'
                }
            ];

            let grid = $("#grid-LandingItem").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn't exist
                initializeKendoGridWithoutPaging("grid-LandingItem", url, { searchString, companyId, jobOrderId }, columns);
            }

            loadTaskJobOrderCounts(jobOrderId);
        }
    }

    function updateSelectedLandingItems(checkbox, jobOrderId, landingItemId) {
        if (checkbox.checked) {
            // Add the landingItemId to mulid if checked
            if (!mulid.includes(landingItemId)) {
                mulid += mulid.length > 0 ? `,${landingItemId}` : landingItemId;
            }
        } else {
            // Remove the landingItemId from mulid if unchecked
            let idsArray = mulid.split(",").filter(id => id !== landingItemId);
            mulid = idsArray.join(",");
        }
        
        // Call function to update button states
        updateLandingItemsButtonStates();
    }

    function toggleSelectAllLandingItems(headerCheckbox) {
        let checked = headerCheckbox.checked;
        mulid = ""; // Reset mulid when toggling "Select All"

        document.querySelectorAll(".selectLandingItems").forEach(function (checkbox) {
            checkbox.checked = checked;

            // If checked, add all landingItemIds to mulid
            if (checked) {
                let landingItemId = checkbox.getAttribute("data-landingItemId");
                if (landingItemId) {
                    mulid += mulid.length > 0 ? `,${landingItemId}` : landingItemId;
                }
            }
        });

        // Call function to update button states
        updateLandingItemsButtonStates();
    }

    function updateLandingItemsButtonStates() {
        // Check if any selectLandingItems checkbox is selected
        let anySelected = document.querySelectorAll(".selectLandingItems:checked").length > 0;

        // Enable or disable buttons based on selection
        document.getElementById("btnCreateDebitNoteLandingItems").disabled = !anySelected;
        document.getElementById("btnTaskForwardLandingItems").disabled = !anySelected;
        document.getElementById("btnBulkUpdateLandingItems").disabled = !anySelected;
    }

    // ================== OTHER SERVICE GRID ================== //
    function initializeOtherServiceGrid() {
        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("OtherServiceList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "200px",
                    headerTemplate: '<input type="checkbox" id="selectAllOtherService" onclick="toggleSelectAllOtherService(this)" />',
                    template: function (dataItem) {
                        // Define a common style for equal height, width, and gap
                        let commonStyle = 'style="margin-right:5px; vertical-align: middle;"';

                        // Row checkbox with common style
                        let rowCheckbox = `<input type="checkbox" class="ps-0 border-0 bg-transparent selectOtherService" ${commonStyle} data-otherServiceId="${dataItem.otherServiceId}"  onclick="updateSelectedOtherService(this, '${dataItem.jobOrderId}','${dataItem.otherServiceId}')" />`;

                        // Action buttons with common style
                        let buttons = `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openOtherServiceModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.otherServiceId}','${dataItem.debitNoteId}', 'view')">
        <i class="material-symbols-outlined text-primary">visibility</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openOtherServiceModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.otherServiceId}','${dataItem.debitNoteId}', 'edit')">
        <i class="material-symbols-outlined text-warning" >edit</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="deleteOtherService('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.otherServiceId}','${dataItem.debitNoteId}')">
        <i class="material-symbols-outlined text-danger" >delete</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openpurchaseExpenseModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.otherServiceId}','${dataItem.taskId}')">
        <i class="material-symbols-outlined" >universal_currency_alt</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openDebitNoteModal('${dataItem.jobOrderId}','${dataItem.debitNoteId}')">
        <i class="material-symbols-outlined" >payments</i>
    </button>`;

                        return rowCheckbox + buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "serviceName", title: "Service Name", width: "200px" },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                { field: "totAmt", title: "Total Amount", width: "100px" },
                { field: "gstAmt", title: "GST Amount", width: "100px" },
                { field: "totAmtAftGst", title: "Total After GST", width: "120px" },
                { field: "remarks", title: "Remarks", width: "200px" },
                {
                    field: "isActive",
                    title: "Active",
                    width: "80px",
                    template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />'
                }
            ];

            let grid = $("#grid-OtherService").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn't exist
                initializeKendoGridWithoutPaging("grid-OtherService", url, { searchString, companyId, jobOrderId }, columns);
            }

            loadTaskJobOrderCounts(jobOrderId);
        }
    }

    function updateSelectedOtherService(checkbox, jobOrderId, otherServiceId) {
        if (checkbox.checked) {
            // Add the otherServiceId to mulid if checked
            if (!mulid.includes(otherServiceId)) {
                mulid += mulid.length > 0 ? `,${otherServiceId}` : otherServiceId;
            }
        } else {
            // Remove the otherServiceId from mulid if unchecked
            let idsArray = mulid.split(",").filter(id => id !== otherServiceId);
            mulid = idsArray.join(",");
        }
        
        // Call function to update button states
        updateOtherServiceButtonStates();
    }

    function toggleSelectAllOtherService(headerCheckbox) {
        let checked = headerCheckbox.checked;
        mulid = ""; // Reset mulid when toggling "Select All"

        document.querySelectorAll(".selectOtherService").forEach(function (checkbox) {
            checkbox.checked = checked;

            // If checked, add all otherServiceIds to mulid
            if (checked) {
                let otherServiceId = checkbox.getAttribute("data-otherServiceId");
                if (otherServiceId) {
                    mulid += mulid.length > 0 ? `,${otherServiceId}` : otherServiceId;
                }
            }
        });

        // Call function to update button states
        updateOtherServiceButtonStates();
    }

    function updateOtherServiceButtonStates() {
        // Check if any selectOtherService checkbox is selected
        let anySelected = document.querySelectorAll(".selectOtherService:checked").length > 0;

        // Enable or disable buttons based on selection
        document.getElementById("btnCreateDebitNoteOtherService").disabled = !anySelected;
        document.getElementById("btnTaskForwardOtherService").disabled = !anySelected;
        document.getElementById("btnBulkUpdateOtherService").disabled = !anySelected;
    }

    // ================== AGENCY REMUNERATION GRID ================== //
    function initializeAgencyRemunerationGrid() {

        let searchString = "";
        let jobOrderId = $('#view_jobOrderId').val();
        let companyId = $('#companyId').val();

        if (jobOrderId > 0) {
            let url = '@Url.Action("AgencyRemunerationList", "Job", new { area = "Project" })';
            let columns = [
                {
                    title: "Actions",
                    width: "200px",
                    headerTemplate: '<input type="checkbox" id="selectAllAgencyRemuneration" onclick="toggleSelectAllAgencyRemuneration(this)" />',
                    template: function (dataItem) {
                        // Define a common style for equal height, width, and gap
                        let commonStyle = 'style="margin-right:5px; vertical-align: middle;"';

                        // Row checkbox with common style
                        let rowCheckbox = `<input type="checkbox" class="ps-0 border-0 bg-transparent selectAgencyRemuneration" ${commonStyle} data-agencyRemunerationId="${dataItem.agencyRemunerationId}"  onclick="updateSelectedAgencyRemuneration(this, '${dataItem.jobOrderId}','${dataItem.agencyRemunerationId}')" />`;

                        // Action buttons with common style
                        let buttons = `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openAgencyRemunerationModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.agencyRemunerationId}','${dataItem.debitNoteId}', 'view')">
        <i class="material-symbols-outlined text-primary">visibility</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openAgencyRemunerationModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.agencyRemunerationId}','${dataItem.debitNoteId}', 'edit')">
        <i class="material-symbols-outlined text-warning" >edit</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="deleteAgencyRemuneration('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.agencyRemunerationId}','${dataItem.debitNoteId}')">
        <i class="material-symbols-outlined text-danger" >delete</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openpurchaseExpenseModal('${dataItem.jobOrderId}','${dataItem.jobOrderNo}','${dataItem.agencyRemunerationId}','${dataItem.taskId}')">
        <i class="material-symbols-outlined" >universal_currency_alt</i>
    </button>`;

                        buttons += `<button class="ps-0 border-0 bg-transparent" ${commonStyle} onclick="openDebitNoteModal('${dataItem.jobOrderId}','${dataItem.debitNoteId}')">
        <i class="material-symbols-outlined" >payments</i>
    </button>`;

                        return rowCheckbox + buttons;
                    }
                },
                { field: "debitNoteNo", title: "Debit Note No.", width: "150px" },
                { field: "chargeName", title: "Charge Name", width: "150px" },
                { field: "statusName", title: "Status Name", width: "150px" },
                { field: "totAmt", title: "Total Amount", width: "100px" },
                { field: "gstAmt", title: "GST Amount", width: "100px" },
                { field: "totAmtAftGst", title: "Total After GST", width: "120px" },
                { field: "remarks", title: "Remarks", width: "200px" },
                {
                    field: "isActive",
                    title: "Active",
                    width: "80px",
                    template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />'
                }
            ];

            let grid = $("#grid-AgencyRemuneration").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, jobOrderId });
            } else {
                // Initialize grid if it doesn't exist
                initializeKendoGridWithoutPaging("grid-AgencyRemuneration", url, { searchString, companyId, jobOrderId }, columns);
            }

            loadTaskJobOrderCounts(jobOrderId);
        }
    }

    function updateSelectedAgencyRemuneration(checkbox, jobOrderId, agencyRemunerationId) {
        if (checkbox.checked) {
            // Add the agencyRemunerationId to mulid if checked
            if (!mulid.includes(agencyRemunerationId)) {
                mulid += mulid.length > 0 ? `,${agencyRemunerationId}` : agencyRemunerationId;
            }
        } else {
            // Remove the agencyRemunerationId from mulid if unchecked
            let idsArray = mulid.split(",").filter(id => id !== agencyRemunerationId);
            mulid = idsArray.join(",");
        }
        
        // Call function to update button states
        updateAgencyRemunerationButtonStates();
    }

    function toggleSelectAllAgencyRemuneration(headerCheckbox) {
        let checked = headerCheckbox.checked;
        mulid = ""; // Reset mulid when toggling "Select All"

        document.querySelectorAll(".selectAgencyRemuneration").forEach(function (checkbox) {
            checkbox.checked = checked;

            // If checked, add all agencyRemunerationIds to mulid
            if (checked) {
                let agencyRemunerationId = checkbox.getAttribute("data-agencyRemunerationId");
                if (agencyRemunerationId) {
                    mulid += mulid.length > 0 ? `,${agencyRemunerationId}` : agencyRemunerationId;
                }
            }
        });

        // Call function to update button states
        updateAgencyRemunerationButtonStates();
    }

    function updateAgencyRemunerationButtonStates() {
        // Check if any selectAgencyRemuneration checkbox is selected
        let anySelected = document.querySelectorAll(".selectAgencyRemuneration:checked").length > 0;

        // Enable or disable buttons based on selection
        document.getElementById("btnCreateDebitNoteAgency").disabled = !anySelected;
        document.getElementById("btnTaskForwardAgency").disabled = !anySelected;
        document.getElementById("btnBulkUpdateAgency").disabled = !anySelected;
    }
</script>

<style>
    .modal-xxl {
        max-width: 95%;
    }

    .scroll-left, .scroll-right {
        position: absolute;
        top: 50%;
        z-index: 100;
        transform: translateY(-50%);
    }

    .scroll-left {
        left: -40px;
    }

    .scroll-right {
        right: -40px;
    }

    /* Ensure tabs scroll horizontally if needed */
    .nav-pills.flex-nowrap {
        overflow-x: auto;
        white-space: nowrap;
    }
        /* Optionally hide the scrollbar for a cleaner look */
        .nav-pills.flex-nowrap::-webkit-scrollbar {
            display: none;
        }

    .kendo-grid {
        height: 500px;
        margin-top: 20px;
    }

    .nav-link {
        transition: all 0.3s ease;
    }

        .nav-link.active {
            transform: scale(1.05);
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

    .card-header {
        font-weight: 600;
        letter-spacing: 0.5px;
    }
</style>
@{
    ViewData["Title"] = "Tariff";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@{
    bool canCreate = ViewBag.IsCreate ?? false;
    bool canEdit = ViewBag.IsEdit ?? false;
    bool canDelete = ViewBag.IsDelete ?? false;
    bool canRead = ViewBag.IsRead ?? false;
    int companyId = ViewBag.CompanyId;
}

<style>

    .modal-xxl {
        max-width: 95%;
    }

    .scrollable-tabs {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
        scrollbar-width: none; /* Firefox */
    }

        .scrollable-tabs::-webkit-scrollbar {
            display: none; /* Chrome/Safari/Edge */
        }

    .scroll-button {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        z-index: 1;
        padding: 0.5rem;
        line-height: 1;
    }

    .scroll-left {
        left: 0;
    }

    .scroll-right {
        right: 0;
    }

    .nav-item {
        flex-shrink: 0; /* Prevent tab items from shrinking */
    }
</style>

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <!-- Simple Header Section -->
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h4 class="mb-0">Tariff Management</h4>
                    <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addJobOrderModal">Copy Tariff Cust2Cust</button>
                    <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addJobOrderModal">Copy Tariff Company2Cust</button>
                    <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addJobOrderModal">Add</button>
                </div>

                <!-- Simple Filter Section -->
                <div class="filter-section bg-light p-3 rounded mb-4">
                    <div class="row align-items-center">
                        <div class="col-md-3">
                            <label for="cmb_customer" class="form-label">Customer <span class="text-danger">*</span></label>
                            <select id="cmb_customer" style="width: 100%"></select>
                        </div>
                        <div class="col-md-3">
                            <label for="cmb_port" class="form-label">Port <span class="text-danger">*</span></label>
                            <select id="cmb_port" style="width: 100%"></select>
                        </div>

                        <div class="col-md-2 d-flex">
                            <button type="button" class="btn btn-primary btn-sm me-2" onclick="loadTariffGrid();">Search</button>
                            <button type="button" class="btn btn-secondary btn-sm" onclick="clearSearch();">Clear</button>
                            <button class="btn btn-light btn-sm me-2" onclick="loadTariffGrid();">Refresh</button>
                        </div>
                    </div>
                </div>

                <!-- Scrollable Tabs Container -->
                <div class="position-relative py-2">
                    <!-- Scroll Buttons -->
                    <button class="btn btn-sm btn-secondary scroll-button scroll-left">
                        &lt;
                    </button>
                    <button class="btn btn-sm btn-secondary scroll-button scroll-right">
                        &gt;
                    </button>

                    <!-- Tab List -->
                    <div class="scrollable-tabs">
                        <ul class="nav nav-pills mb-3 flex-nowrap" id="serviceTabs" role="tablist">
                            <!-- Main Service Tabs -->
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#port-expenses" type="button" data-status="PortExpense">
                                    <span class="badge bg-secondary me-1">0</span> Port Expenses
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#launch-services" type="button" data-status="LaunchServices">
                                    <span class="badge bg-secondary me-1">0</span> Launch Services
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#equipments-used" type="button" data-status="EquipmentsUsed">
                                    <span class="badge bg-primary me-1">0</span> Equipments Used
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#crew-sign-on" type="button" data-status="CrewSignOn">
                                    <span class="badge bg-success me-1">0</span> Crew Sign On
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#crew-sign-off" type="button" data-status="CrewSignOff">
                                    <span class="badge bg-danger me-1">0</span> Crew Sign Off
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#crew-miscellaneous" type="button" data-status="CrewMiscellaneous">
                                    <span class="badge bg-info me-1">0</span> Crew Miscellaneous
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#medical-assistance" type="button" data-status="MedicalAssistance">
                                    <span class="badge bg-warning me-1">0</span> Medical Assistance
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#consignment-import" type="button" data-status="ConsignmentImport">
                                    <span class="badge bg-primary me-1">0</span> Consignment Import
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#consignment-export" type="button" data-status="ConsignmentExport">
                                    <span class="badge bg-success me-1">0</span> Consignment Export
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#third-party-supply" type="button" data-status="ThirdPartySupply">
                                    <span class="badge bg-danger me-1">0</span> Third Party Supply
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#fresh-water" type="button" data-status="FreshWaterSupply">
                                    <span class="badge bg-info me-1">0</span> Fresh Water
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#technicians-surveyors" type="button" data-status="TechniciansSurveyors">
                                    <span class="badge bg-warning me-1">0</span> Technicians Surveyors
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#landing-items" type="button" data-status="LandingItems">
                                    <span class="badge bg-primary me-1">0</span> Landing Items
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#other-service" type="button" data-status="OtherService">
                                    <span class="badge bg-success me-1">0</span> Other Service
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#agency-remuneration" type="button" data-status="AgencyRemuneration">
                                    <span class="badge bg-danger me-1">0</span> Agency Remuneration
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#visa" type="button" data-status="Visa">
                                    <span class="badge bg-danger me-1">0</span> Visa
                                </button>
                            </li>
                        </ul>
                    </div>
                </div>

                <!-- Tab Content -->
                <div class="tab-content" id="serviceTabContent">
                    <!-- Port Expenses Tab -->
                    <div class="tab-pane fade show active" id="port-expenses">
                        <!-- Button Group for Port Expenses -->
                        <div class="mb-3">
                            <button id="btnAddPortExpense" onclick="openChildModal('Common',1)" class="btn btn-primary me-2">Add Port Expense</button>
                        </div>
                        <!-- Grid for Port Expenses -->
                        <div id="grid-PortExpense" class="kendo-grid"></div>
                    </div>

                    <!-- Launch Services Tab -->
                    <div class="tab-pane fade" id="launch-services">
                        <!-- Button Group for Launch Services (adjust as needed) -->
                        <div class="mb-3">
                            <button id="btnAddLaunchService" onclick="openChildModal('LaunchService',2)" class="btn btn-primary me-2">Add Launch Service</button>
                        </div>
                        <!-- Grid for Launch Services -->
                        <div id="grid-LaunchServices" class="kendo-grid"></div>
                    </div>

                    <!-- Equipments Used Tab -->
                    <div class="tab-pane fade" id="equipments-used">
                        <!-- Button Group for Equipments Used -->
                        <div class="mb-3">
                            <button id="btnAddEquipmentUsed" onclick="openChildModal('Common',3)" class="btn btn-primary me-2">Add Equipment</button>
                        </div>
                        <!-- Grid for Equipments Used -->
                        <div id="grid-EquipmentsUsed" class="kendo-grid"></div>
                    </div>

                    <!-- Crew Sign On Tab -->
                    <div class="tab-pane fade" id="crew-sign-on">
                        <!-- Button Group for Crew Sign On -->
                        <div class="mb-3">
                            <button id="btnAddCrewSignOn" onclick="openChildModal('Common',4)" class="btn btn-primary me-2">Add Crew Sign On</button>
                        </div>
                        <!-- Grid for Crew Sign On -->
                        <div id="grid-CrewSignOn" class="kendo-grid"></div>
                    </div>

                    <!-- Crew Sign Off Tab -->
                    <div class="tab-pane fade" id="crew-sign-off">
                        <!-- Button Group for Crew Sign Off -->
                        <div class="mb-3">
                            <button id="btnAddCrewSignOff" onclick="openChildModal('Common',5)" class="btn btn-primary me-2">Add Crew Sign Off</button>
                        </div>
                        <!-- Grid for Crew Sign Off -->
                        <div id="grid-CrewSignOff" class="kendo-grid"></div>
                    </div>

                    <!-- Crew Miscellaneous Tab -->
                    <div class="tab-pane fade" id="crew-miscellaneous">
                        <!-- Button Group for Crew Miscellaneous -->
                        <div class="mb-3">
                            <button id="btnAddCrewMisc" onclick="openChildModal('Common',6)" class="btn btn-primary me-2">Add Crew Miscellaneous</button>
                        </div>
                        <!-- Grid for Crew Miscellaneous -->
                        <div id="grid-CrewMiscellaneous" class="kendo-grid"></div>
                    </div>

                    <!-- Medical Assistance Tab -->
                    <div class="tab-pane fade" id="medical-assistance">
                        <!-- Button Group for Medical Assistance -->
                        <div class="mb-3">
                            <button id="btnAddMedicalAssistance" onclick="openChildModal('Common',7)" class="btn btn-primary me-2">Add Medical Assistance</button>
                        </div>
                        <!-- Grid for Medical Assistance -->
                        <div id="grid-MedicalAssistance" class="kendo-grid"></div>
                    </div>

                    <!-- Consignment Import Tab -->
                    <div class="tab-pane fade" id="consignment-import">
                        <!-- Button Group for Consignment Import -->
                        <div class="mb-3">
                            <button id="btnAddConsignmentImport" onclick="openChildModal('ConsignmentImport',8)" class="btn btn-primary me-2">Add Consignment Import</button>
                        </div>
                        <!-- Grid for Consignment Import -->
                        <div id="grid-ConsignmentImport" class="kendo-grid"></div>
                    </div>

                    <!-- Consignment Export Tab -->
                    <div class="tab-pane fade" id="consignment-export">
                        <!-- Button Group for Consignment Export -->
                        <div class="mb-3">
                            <button id="btnAddConsignmentExport" onclick="openChildModal('ConsignmentExport',9)" class="btn btn-primary me-2">Add Consignment Export</button>
                        </div>
                        <!-- Grid for Consignment Export -->
                        <div id="grid-ConsignmentExport" class="kendo-grid"></div>
                    </div>

                    <!-- Third Party Supply Tab -->
                    <div class="tab-pane fade" id="third-party-supply">
                        <!-- Button Group for Third Party Supply -->
                        <div class="mb-3">
                            <button id="btnAddThirdPartySupply" onclick="openChildModal('Common',10)" class="btn btn-primary me-2">Add Third Party Supply</button>
                        </div>
                        <!-- Grid for Third Party Supply -->
                        <div id="grid-ThirdPartySupply" class="kendo-grid"></div>
                    </div>

                    <!-- Fresh Water Tab -->
                    <div class="tab-pane fade" id="fresh-water">
                        <!-- Button Group for Fresh Water -->
                        <div class="mb-3">
                            <button id="btnAddFreshWater" onclick="openChildModal('FreshWater',11)" class="btn btn-primary me-2">Add Fresh Water</button>
                        </div>
                        <!-- Grid for Fresh Water -->
                        <div id="grid-FreshWaterSupply" class="kendo-grid"></div>
                    </div>

                    <!-- Technicians Surveyors Tab -->
                    <div class="tab-pane fade" id="technicians-surveyors">
                        <!-- Button Group for Technicians Surveyors -->
                        <div class="mb-3">
                            <button id="btnAddTechnicianSurveyor" onclick="openChildModal('Common',12)" class="btn btn-primary me-2">Add Technician Surveyor</button>
                        </div>
                        <!-- Grid for Technicians Surveyors -->
                        <div id="grid-TechniciansSurveyors" class="kendo-grid"></div>
                    </div>

                    <!-- Landing Items Tab -->
                    <div class="tab-pane fade" id="landing-items">
                        <!-- Button Group for Landing Items -->
                        <div class="mb-3">
                            <button id="btnAddLandingItem" onclick="openChildModal('Common',14)" class="btn btn-primary me-2">Add Landing Item</button>
                        </div>
                        <!-- Grid for Landing Items -->
                        <div id="grid-LandingItems" class="kendo-grid"></div>
                    </div>

                    <!-- Other Service Tab -->
                    <div class="tab-pane fade" id="other-service">
                        <!-- Button Group for Other Service -->
                        <div class="mb-3">
                            <button id="btnAddOtherService" onclick="openChildModal('Common',15)" class="btn btn-primary me-2">Add Other Service</button>
                        </div>
                        <!-- Grid for Other Service -->
                        <div id="grid-OtherService" class="kendo-grid"></div>
                    </div>

                    <!-- Agency Remuneration Tab -->
                    <div class="tab-pane fade" id="agency-remuneration">
                        <!-- Button Group for Agency Remuneration -->
                        <div class="mb-3">
                            <button id="btnAddAgencyRemuneration" onclick="openChildModal('Common',16)" class="btn btn-primary me-2">Add Agency Remuneration</button>
                        </div>
                        <!-- Grid for Agency Remuneration -->
                        <div id="grid-AgencyRemuneration" class="kendo-grid"></div>
                    </div>

                    <!-- Visa Tab -->
                    <div class="tab-pane fade" id="visa">
                        <!-- Button Group for Visa -->
                        <div class="mb-3">
                            <button id="btnAddVisa" onclick="openChildModal('Visa',0)" class="btn btn-primary me-2">Add Visa</button>
                        </div>
                        <!-- Grid for Visa -->
                        <div id="grid-Visa" class="kendo-grid"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section externalhtml {
    @await Html.PartialAsync("_CommonTariff");
    @await Html.PartialAsync("_FreshWaterTariff");
    @await Html.PartialAsync("_LaunchServiceTariff");
    @await Html.PartialAsync("_VisaTariff");
    @*@await Html.RenderPartialAsync("_VisaTariff");*@
}

@section Scripts {
    <script>

        //================== GLOBAL VARIABLES ================== //
        let companyId = 0;
        let taskId = 1;
        let permissions = {};

        $(document).ready(function () {

            companyId = getUrlParameter('companyId') || 1;

            permissions = {
                canCreate: @Json.Serialize(canCreate),
                canEdit: @Json.Serialize(canEdit),
                canDelete: @Json.Serialize(canDelete),
                canRead: @Json.Serialize(canRead),
            };
            Refresh();
            loadTariffGrid();

        });

        function Refresh() {
            const portUrl = '@Url.Action("GetPortLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            bindComboBox(portUrl, "cmb_port", "portName", "portId");

            const customerUrl = '@Url.Action("GetCustomerLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            const columnsProperties = [
                { field: 'customerCode', title: 'Code', width: 100 },
                { field: 'customerName', title: 'Name', width: 200 }
            ];
            const filterFields = ['customerCode', 'customerName'];
            bindMultiColumnComboBox(customerUrl, "cmb_customer", "customerName", "customerId", columnsProperties, filterFields);
        }

        function SelectedDropdown(DrpdwnName) {
        }

        function OnSelectDropdown(dataItem, DrpdwnName) {
        }

        function getComboBoxValue(selector, defaultValue = 0) {
            let comboBox = $(selector).data('kendoComboBox') || $(selector).data('kendoMultiColumnComboBox');
            if (comboBox) {
                return parseInt(comboBox.value() || defaultValue, 10);
            } else {
                console.error(`ComboBox with selector '${selector}' is not initialized.`);
                alert(`ComboBox with selector '${selector}' is not loaded correctly. Please refresh the page or contact support.`);
                return defaultValue;
            }
        }

        function loadTariffGrid() {

            let customerId = getComboBoxValue('#cmb_customer', 0);
            let portId = getComboBoxValue('#cmb_port', 0);

            if (customerId == 0 || portId == 0) {
                 alert("Please select both the customer and the port.");
            } else {
                initializePortExpenseGrid();
                initializeLaunchServicesGrid();
                initializeEquipmentsUsedGrid();
                initializeCrewSignOnGrid();
                initializeCrewSignOffGrid();
                initializeCrewMiscellaneousGrid();
                initializeMedicalAssistanceGrid();
                initializeConsignmentImportGrid();
                initializeConsignmentExportGrid();
                initializeThirdPartySupplyGrid();
                initializeFreshWaterSupplyGrid();
                initializeTechniciansSurveyorsGrid();
                initializeLandingItemsGrid();
                initializeOtherServiceGrid();
                initializeAgencyRemunerationGrid();
                loadStatusCounts();
            }
        }

        function loadStatusCounts() {

            let customerId = getComboBoxValue('#cmb_customer', 0);
            let portId = getComboBoxValue('#cmb_port', 0);

            $.ajax({
                url: '@Url.Action("GetTariffStatusCounts", "Tariff", new { area = "Project" })',
                type: 'POST', // Use POST method
                data: {
                    searchString: '',
                    companyId: companyId,
                    customerId: customerId,
                    portId: portId
                },
                success: function (counts) {

                    $('#serviceTabs [data-status="PortExpense"] .badge').text(counts.portExpense);
                    $('#serviceTabs [data-status="LaunchServices"] .badge').text(counts.launchServices);
                    $('#serviceTabs [data-status="EquipmentsUsed"] .badge').text(counts.equipmentsUsed);
                    $('#serviceTabs [data-status="CrewSignOn"] .badge').text(counts.crewSignOn);
                    $('#serviceTabs [data-status="CrewSignOff"] .badge').text(counts.crewSignOff);
                    $('#serviceTabs [data-status="CrewMiscellaneous"] .badge').text(counts.crewMiscellaneous);
                    $('#serviceTabs [data-status="MedicalAssistance"] .badge').text(counts.medicalAssistance);
                    $('#serviceTabs [data-status="ConsignmentImport"] .badge').text(counts.consignmentImport);
                    $('#serviceTabs [data-status="ConsignmentExport"] .badge').text(counts.consignmentExport);
                    $('#serviceTabs [data-status="ThirdPartySupply"] .badge').text(counts.thirdPartySupply);
                    $('#serviceTabs [data-status="FreshWaterSupply"] .badge').text(counts.freshWaterSupply);
                    $('#serviceTabs [data-status="TechniciansSurveyors"] .badge').text(counts.techniciansSurveyors);
                    $('#serviceTabs [data-status="LandingItems"] .badge').text(counts.landingItems);
                    $('#serviceTabs [data-status="OtherService"] .badge').text(counts.otherService);
                    $('#serviceTabs [data-status="AgencyRemuneration"] .badge').text(counts.agencyRemuneration);
                    $('#serviceTabs [data-status="Visa"] .badge').text(counts.visa);
                },
                error: function (xhr, status, error) {
                    console.error('Error loading status counts:', error);
                }
            });
        }

        function clearSearch() {
            $('#cmb_customer').data('kendoMultiColumnComboBox').value('');
            $('#cmb_port').data('kendoComboBox').value('');
            initializePortExpenseGrid();
            initializeLaunchServicesGrid();
            initializeEquipmentsUsedGrid();
            initializeCrewSignOnGrid();
            initializeCrewSignOffGrid();
            initializeCrewMiscellaneousGrid();
            initializeMedicalAssistanceGrid();
            initializeConsignmentImportGrid();
            initializeConsignmentExportGrid();
            initializeThirdPartySupplyGrid();
            initializeFreshWaterSupplyGrid();
            initializeTechniciansSurveyorsGrid();
            initializeLandingItemsGrid();
            initializeOtherServiceGrid();
            initializeAgencyRemunerationGrid();
            loadStatusCounts();
        }

        function openChildModal(serviceType,TaskId) {

            taskId = parseInt(TaskId);
            let customerId = getComboBoxValue('#cmb_customer', 0);
            let portId = getComboBoxValue('#cmb_port', 0);

            if (customerId == 0 || portId == 0) {
                 alert("Please select both the customer and the port.");
            } else {
                const modalId = `#add${serviceType}TariffModal`;
                const modalElement = $(modalId);
                modalElement.modal('show');

                if (serviceType == 'FreshWater') {
                    // Pre-set Customer/Port in the modal (if needed)
                    modal.find('#freshwater_cmb_customer').val(customerId).trigger('change');
                    modal.find('#freshwater_cmb_port').val(portId).trigger('change');
                    const chargeUrl = '@Url.Action("GetChargeLookup", "Lookup", new { area = "" })?companyId=' + companyId + '&taskId' + taskId;
                    bindComboBox(chargeUrl, "freshwater_cmb_chagre", "chargeName", "chargeId");

                } else if (serviceType == 'LaunchService') {
                    // Pre-set Customer/Port in the modal (if needed)
                    modal.find('#launchservice_cmb_customer').val(customerId).trigger('change');
                    modal.find('#launchservice_cmb_port').val(portId).trigger('change');
                    const chargeUrl = '@Url.Action("GetChargeLookup", "Lookup", new { area = "" })?companyId=' + companyId + '&taskId' + taskId;
                    bindComboBox(chargeUrl, "launchservice_cmb_chagre", "chargeName", "chargeId");

                } else if (serviceType == 'Visa') {
                    // Pre-set Customer/Port in the modal (if needed)
                    modal.find('#visa_cmb_customer').val(customerId).trigger('change');
                    modal.find('#visa_cmb_port').val(portId).trigger('change');
                } else {
                    // Pre-set Customer/Port in the modal (if needed)
                    modal.find('#common_cmb_customer').val(customerId).trigger('change');
                    modal.find('#common_cmb_port').val(portId).trigger('change');
                    modal.find('#common_cmb_task').val(taskId).trigger('change');
                    const chargeUrl = '@Url.Action("GetChargeLookup", "Lookup", new { area = "" })?companyId=' + companyId + '&taskId' + taskId;
                    bindComboBox(chargeUrl, "common_cmb_chagre", "chargeName", "chargeId");

                }
            }
        }

        //================== SCROLLABLE TABS ================== //
        document.querySelectorAll('.scroll-button').forEach(button => {
            button.addEventListener('click', function (e) {
                const container = document.querySelector('.scrollable-tabs');
                const scrollAmount = 200; // Adjust scroll amount
                container.scrollLeft += this.classList.contains('scroll-left') ? -scrollAmount : scrollAmount;
            });
        });

        const container = document.querySelector('.scrollable-tabs');
        const checkScroll = () => {
            document.querySelector('.scroll-left').style.display = container.scrollLeft <= 0 ? 'none' : 'block';
            document.querySelector('.scroll-right').style.display =
                container.scrollLeft + container.offsetWidth >= container.scrollWidth ? 'none' : 'block';
        };

        container.addEventListener('scroll', checkScroll);
        checkScroll();

        //================== GRID FUNCTIONS ================== //

        function initializePortExpenseGrid() {
            initializeTaskGrid("PortExpenses",   "@Url.Action("GetTariffPortExpensesList", "Tariff", new { area = "Project" })","grid-PortExpense");
        }

        function initializeLaunchServicesGrid() {
            initializeTaskGrid("LaunchServices","@Url.Action("GetTariffLaunchServicesList", "Tariff", new { area = "Project" })",  "grid-LaunchServices");
        }

        function initializeEquipmentsUsedGrid() {
            initializeTaskGrid("EquipmentsUsed","@Url.Action("GetTariffEquipmentsUsedList", "Tariff", new { area = "Project" })",  "grid-EquipmentsUsed");
        }

        function initializeCrewSignOnGrid() {
            initializeTaskGrid("CrewSignOn","@Url.Action("GetTariffCrewSignOnList", "Tariff", new { area = "Project" })",  "grid-CrewSignOn");
        }

        function initializeCrewSignOffGrid() {
            initializeTaskGrid("CrewSignOff", "@Url.Action("GetTariffCrewSignOffList", "Tariff", new { area = "Project" })", "grid-CrewSignOff");
        }

        function initializeCrewMiscellaneousGrid() {
            initializeTaskGrid("CrewMiscellaneous", "@Url.Action("GetTariffCrewMiscellaneousList", "Tariff", new { area = "Project" })", "grid-CrewMiscellaneous");
        }

        function initializeMedicalAssistanceGrid() {
            initializeTaskGrid("MedicalAssistance", "@Url.Action("GetTariffMedicalAssistanceList", "Tariff", new { area = "Project" })", "grid-MedicalAssistance");
        }

        function initializeConsignmentImportGrid() {
            initializeTaskGrid("ConsignmentImport", "@Url.Action("GetTariffConsignmentImportList", "Tariff", new { area = "Project" })", "grid-ConsignmentImport");
        }

        function initializeConsignmentExportGrid() {
            initializeTaskGrid("ConsignmentExport", "@Url.Action("GetTariffConsignmentExportList", "Tariff", new { area = "Project" })", "grid-ConsignmentExport");
        }

        function initializeThirdPartySupplyGrid() {
            initializeTaskGrid("ThirdPartySupply", "@Url.Action("GetTariffThirdPartySupplyList", "Tariff", new { area = "Project" })","grid-ThirdPartySupply");
        }

        function initializeFreshWaterSupplyGrid() {
            initializeTaskGrid("FreshWaterSupply", "@Url.Action("GetTariffFreshWaterSupplyList", "Tariff", new { area = "Project" })", "grid-FreshWaterSupply");
        }

        function initializeTechniciansSurveyorsGrid() {
            initializeTaskGrid("TechniciansSurveyors", "@Url.Action("GetTariffTechniciansSurveyorsList", "Tariff", new { area = "Project" })", "grid-TechniciansSurveyors");
        }

        function initializeLandingItemsGrid() {
            initializeTaskGrid("LandingItems", "@Url.Action("GetTariffLandingItemsList", "Tariff", new { area = "Project" })", "grid-LandingItems");
        }

        function initializeOtherServiceGrid() {
            initializeTaskGrid("OtherService", "@Url.Action("GetTariffOtherServiceList", "Tariff", new { area = "Project" })", "grid-OtherService");
        }

        function initializeAgencyRemunerationGrid() {
            initializeTaskGrid("AgencyRemuneration", "@Url.Action("GetTariffAgencyRemunerationList", "Tariff", new { area = "Project" })", "grid-AgencyRemuneration");
        }

        // ================== COMMON GRID ================== //

        function initializeTaskGrid(taskName, url, gridId) {

            let searchString = "";
            //let customerId = 1;
            //let portId = 3751;
            let customerId = getComboBoxValue('#cmb_customer', 0);
            let portId = getComboBoxValue('#cmb_port', 0);

            let columns = [
                {
                    title: "Actions",
                    width: "100px",
                    template: function (dataItem) {
                        let buttons = ` <button class="ps-0 border-0 bg-transparent" onclick="openTariffModal('${dataItem.tariffId}','${dataItem.taskId}','${dataItem.customerId}','${dataItem.portId}','${dataItem.chargeId}', 'view')">
            <i class="material-symbols-outlined text-primary">visibility</i></button>`;

                        if (permissions.canEdit) {
                            buttons += `<button class="ps-0 border-0 bg-transparent" onclick="openTariffModal('${dataItem.tariffId}','${dataItem.taskId}','${dataItem.customerId}','${dataItem.portId}','${dataItem.chargeId}',  'edit')">
            <i class="material-symbols-outlined text-warning">edit</i></button>`;
                        }

                        if (permissions.canDelete) {
                            buttons += `<button class="ps-0 border-0 bg-transparent" onclick="deleteTariff('${dataItem.tariffId}','${dataItem.taskId}','${dataItem.customerId}','${dataItem.portId}','${dataItem.chargeId}')">
            <i class="material-symbols-outlined text-danger">delete</i></button>`;
                        }
                        return buttons;
                    }
                },
                { field: "taskName", title: "task", width: "100px" },
                { field: "chargeName", title: "charges", width: "200px" },
                { field: "currencyName", title: "Currency", width: "80px" },
                { field: "uomName", title: "Uom", width: "80px" },
                { field: "slabUomName", title: "Slab Type", width: "80px" },
                {
                    field: "basicRate",
                    title: "Basic Rate",
                    width: "100px",
                    format: "{0:n2}" // Format to display 2 decimal places
                },
                {
                    field: "minUnit",
                    title: "Min Unit",
                    width: "100px",
                    format: "{0:n2}" // Format to display 2 decimal places
                },
                {
                    field: "maxUnit",
                    title: "Max Unit",
                    width: "100px",
                    format: "{0:n2}" // Format to display 2 decimal places
                },
                {
                    field: "isAdditional",
                    title: "Is Additional",
                    width: "120px",
                    template: "<input type='checkbox' #= isAdditional ? 'checked' : '' # disabled />" // Checkbox for boolean value
                },
                {
                    field: "additionalUnit",
                    title: "Additional Unit",
                    width: "130px",
                    format: "{0:n2}" // Format to display 2 decimal places
                },
                {
                    field: "additionalRate",
                    title: "Additional Rate",
                    width: "130px",
                    format: "{0:n2}" // Format to display 2 decimal places
                },
                {
                    field: "isPrepayment",
                    title: "Is Prepayment",
                    width: "120px",
                    template: "<input type='checkbox' #= isPrepayment ? 'checked' : '' # disabled />" // Checkbox for boolean value
                },
                {
                    field: "prepaymentPercentage",
                    title: "Pre.Pay.Percentage",
                    width: "140px",
                    format: "{0:n2}" // Format to display 2 decimal places
                },
                { field: "remarks", title: "Remarks", width: "200px" }
            ];

            let grid = $(`#${gridId}`).data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, customerId: customerId, portId: portId });
            } else {
                // Initialize grid if it doesn’t exist
                initializeKendoGrid(gridId, url, { searchString, companyId, customerId, portId }, columns);
            }
        }

        function openTariffModal(tariffId, taskId, customerId, portId, chargeId, mode) {
            $.get('@Url.Action("GetTariffById", "Tariff", new { area = "Project" })', {
                tariffId: tariffId,
                companyId: companyId,
                taskId: taskId,
                customerId: customerId,
                portId: portId,
                chargeId: chargeId
            })
                .done(function (response) {
                    if (response.success) {

                        const serviceType = response.data.rateType; // e.g., 'Common', 'FreshWater', 'LaunchService'
                        const modalId = `#add${serviceType}TariffModal`;

                        // Open the modal using openChildModal
                        openChildModal(serviceType, taskId);

                        // Attach a one-time event handler to populate fields after the modal is shown
                        $(modalId).one('shown.bs.modal', function () {
                            populateTariffModalFields(response.data, serviceType);
                            setTariffMode(mode, $(this)); // Set mode (view/edit)
                        });

                    } else {
                        alert(response.message || "Failed to load tariff data.");
                    }
                })
                .fail(function () {
                    alert("An error occurred while fetching tariff data. Please try again.");
                });
        }

        function populateTariffModalFields(data, serviceType) {

            const prefix = serviceType.toLowerCase(); // e.g., 'common', 'freshwater', 'launchservice'

            // Set common fields (consistent IDs across modals)
            $('#tariffId').val(data.tariffId || ''); // Hidden field, assumed present in all modals
            $('#displayrate').val(data.displayRate || '0.000');
            $('#basicrate').val(data.basicRate || '0.000');
            $('#minunit').val(data.minUnit || '0.000');
            $('#maxunit').val(data.maxUnit || '0.000');
            $('#isAdditional').prop('checked', data.isAdditional ?? false);
            $('#additionalunit').val(data.additionalUnit || '0.000');
            $('#additionalrate').val(data.additionalRate || '0.000');
            $('#isprepayment').prop('checked', data.isPrepayment ?? false);
            $('#prepaymentrate').val(data.prepaymentPercentage || '0.000');
            $('#remarks').val(data.remarks?.trim() || '');
            $('#isActive').prop('checked', data.isActive ?? true);

            // Set service-specific dropdowns
            $(`#${prefix}_cmb_task`).data('kendoComboBox').value(data.taskId || '');
            $(`#${prefix}_cmb_chagre`).data('kendoComboBox').value(data.chargeId || ''); // Note: 'chagre' seems to be a typo in the HTML; should be 'charge'
            $(`#${prefix}_cmb_uom`).data('kendoComboBox').value(data.uomId || '');
            $(`#${prefix}_cmb_currency`).data('kendoComboBox').value(data.currencyId || '');

            // Set additional service-specific fields
            if (serviceType === 'FreshWater') {
                $(`#${prefix}_cmb_fromplace`).data('kendoComboBox').value(data.fromPlace || '');
                $(`#${prefix}_cmb_toplace`).data('kendoComboBox').value(data.toPlace || '');
            } else if (serviceType === 'LaunchService') {
                $(`#${prefix}_cmb_slabuom`).data('kendoComboBox').value(data.slabUomId || '');
            }
            // Add more conditions for other service types (e.g., 'Visa') as needed

            // Set audit fields (assuming they follow the prefix pattern)
            $(`#${prefix}createBy`).text(data.createBy || "N/A");
            $(`#${prefix}createDate`).text(data.createDate ? new Date(data.createDate).toLocaleString() : "N/A");
            $(`#${prefix}editBy`).text(data.editBy || "N/A");
            $(`#${prefix}editDate`).text(data.editDate ? new Date(data.editDate).toLocaleString() : "N/A");
            $(`#${prefix}editVersion`).text(data.editVersion || "N/A");
        }

        function setTariffMode(mode) {
            const isView = mode === 'view';
            const isEdit = mode === 'edit';
            const canEdit = permissions.canEdit && isEdit;

            // Manage input fields' readonly state for editing
            $('#rateType, #taskCode, #taskName, #chargeCode, #chargeName, #portCode, #portName, #customerCode, #customerName, #currencyCode, #currencyName, #uomCode, #uomName, #slabUomCode, #slabUomName, #visaTypeCode, #visaTypeName, #fromPlaceName, #toPlaceName, #displayRate, #basicRate, #minUnit, #maxUnit, #additionalUnit, #additionalRate, #prepaymentPercentage, #remarks')
                .prop('readonly', !canEdit);

            // Manage numeric fields (readonly state)
            $('#tariffId, #taskId, #chargeId, #portId, #customerId, #currencyId, #uomId, #slabUomId, #visaTypeId, #fromPlace, #toPlace, #seqNo, #itemNo')
                .prop('readonly', !canEdit);

            // Manage checkbox disabled state
            $('#isAdditional, #isPrepayment, #isActive').prop('disabled', !canEdit);

            // Control visibility of action buttons
            $('#btnTariffSave').toggle(canEdit); // Save button for edit mode
            $('#btnTariffEdit').toggle(isView && permissions.canEdit); // Edit button for view mode
            $('#btnTariffClose').show(); // Always show Close button
            $('#btnTariffClear').toggle(isEdit); // Show Clear button in edit mode

            // Adjust optional buttons (legacy button)
            $('#btnTariffClear').hide(); // Hide any redundant clear button if present
        }

        function deleteTariff(tariffId, taskId, customerId, portId, chargeId) {
            showDeleteModal("Are you sure you want to delete this record?", function () {
                $.ajax({
                    url: '@Url.Action("DeleteTariff", "Tariff", new { area = "Project" })',
                    type: "DELETE",
                    data: {
                        tariffId: tariffId,
                        companyId: companyId,
                        taskId: taskId,
                        customerId: customerId,
                        portId: portId,
                        chargeId: chargeId
                    },
                    success: function (response) {
                        if (response.success) {
                            // Reload the grid to reflect the deletion
                            loadTariffGrid();
                            $('#confirmationModal').modal('hide');
                            alert("The record has been successfully deleted.");
                        } else {

                            alert(response.message || "Failed to delete the record. Please try again.");
                        }
                    },
                    error: function () {

                        alert("An error occurred while attempting to delete the record. Please try again later.");
                    }
                });
            });
        }

        $('#addCommonTariffModal').on('shown.bs.modal', function () {

            const taskUrl = '@Url.Action("GetTaskLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            bindComboBox(taskUrl, "common_cmb_task", "taskName", "taskId");

            const uomUrl = '@Url.Action("GetUomLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            bindComboBox(uomUrl, "common_cmb_uom", "uomName", "uomId");

            const currencyUrl = '@Url.Action("GetCurrencyLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            bindComboBox(currencyUrl, "common_cmb_currency", "currencyName", "currencyId");

        });

        function saveCommonTariff() {

            let tariffData = {
                TariffId: parseInt($('#tariffId').val()) || 0,
                RateType: 'common',
                TaskId: taskId || 0,
                ChargeId: parseInt($('#common_cmb_chagre').val()) || 0,
                PortId: getComboBoxValue('#cmb_port', 0) || 0,
                CustomerId: getComboBoxValue('#cmb_customer', 0) || 0,
                CurrencyId: parseInt($('#common_cmb_currency').val()) || 0,
                UomId: parseInt($('#common_cmb_uom').val()) || 0,
                SlabUomId: 0,
                VisaTypeId: 0,
                FromPlace: 0,
                ToPlace: 0,
                DisplayRate: parseFloat($('#displayRate').val()) || 0,
                BasicRate: parseFloat($('#basicRate').val()) || 0,
                MinUnit: parseFloat($('#minUnit').val()) || 0,
                MaxUnit: parseFloat($('#maxUnit').val()) || 0,
                IsAdditional: $('#isAdditional').prop('checked'),
                AdditionalUnit: parseFloat($('#additionalUnit').val()) || 0,
                AdditionalRate: parseFloat($('#additionalRate').val()) || 0,
                PrepaymentPercentage: parseFloat($('#prepaymentPercentage').val()) || 0,
                IsPrepayment: $('#isPrepayment').prop('checked'),
                ItemNo: parseInt($('#itemNo').val()) || 0,
                Remarks: $('#remarks').val()?.trim() || '',
                IsActive: $('#isActive').prop('checked')
            };

            console.log("Tariff Data:", tariffData);

            // Validate mandatory fields
            if (!tariffData.RateType) {
                alert('Rate Type, Task Name, and Charge Name are required!');
                return;
            }

            // AJAX call to save the tariff
            $.ajax({
                url: '@Url.Action("SaveTariff", "Tariff", new { area = "Project" })',
                type: "POST",
                data: JSON.stringify({ tariff: tariffData, companyId }), // Tariff data with companyId
                contentType: "application/json",
                success: function (response) {
                    if (response.success) {
                        // Reload the grid and reset the form on success
                        loadTariffGrid();
                        clearTariffForm();
                        $('#addTariffModal').modal('hide');
                        alert("Tariff saved successfully!");
                    } else {
                        // Show error message if the save was unsuccessful
                        alert(response.message || "Failed to save tariff. Please try again.");
                    }
                },
                error: function (xhr) {
                    // Handle server/network errors
                    alert("Error: " + (xhr.responseJSON?.message || "An unexpected error occurred. Please try again later."));
                }
            });
        }
    </script>
}
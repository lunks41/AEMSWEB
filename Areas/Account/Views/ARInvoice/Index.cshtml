@using AMESWEB.Enums;
@{
    ViewData["Title"] = $"AR Invoice ";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@{
    bool canCreate = ViewBag.IsCreate ?? false;
    bool canEdit = ViewBag.IsEdit ?? false;
    bool canDelete = ViewBag.IsDelete ?? false;
    bool canRead = ViewBag.IsRead ?? false;
    bool canExport = ViewBag.IsExport ?? false;
    bool canPrint = ViewBag.IsPrint ?? false;
    int companyId = ViewBag.CompanyId;
}

<div class="row">
    <div class="col-lg-12">
        <div class="card p-2 w-100">
            <div class="card-body p-2">
                <h3>AR Invoice</h3>
                <!-- Pills Navigation -->
                <div class="row align-items-center mb-3">
                    <div class="col-auto">
                        <ul class="nav nav-pills" id="invoicePills" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="main-pill" data-bs-toggle="pill" data-bs-target="#main" type="button" role="tab">
                                    <span class="material-symbols-outlined">inventory_2</span> Main
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="other-pill" data-bs-toggle="pill" data-bs-target="#other" type="button" role="tab">
                                    <span class="material-symbols-outlined">contact_emergency</span> Other
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="history-pill" data-bs-toggle="pill" data-bs-target="#history" type="button" role="tab">
                                    <span class="material-symbols-outlined">manage_history</span> History
                                </button>
                            </li>
                        </ul>
                    </div>
                    <div class="col-auto ms-auto">
                        <div class="d-flex align-items-center gap-3">
                            <!-- Search Box -->
                            <div class="flex-grow-1" style="min-width: 200px;">
                                <input type="search"
                                       class="form-control"
                                       placeholder="Search invoices..."
                                       aria-label="Search">
                            </div>
                            <div class="btn-group gap-2">

                                <button type="button" class="btn btn-primary" id="btnList" title="List" onclick="openListModal();">
                                    <span class="material-symbols-outlined">list</span>
                                </button>
                                <button type="button" class="btn btn-success" id="btnSave" title="Save">
                                    <span class="material-symbols-outlined">save</span>
                                </button>
                                <button type="button" class="btn btn-warning" id="btnReset" title="Reset">
                                    <span class="material-symbols-outlined">refresh</span>
                                </button>
                                <button type="button" class="btn btn-info" id="btnPrint" title="Print">
                                    <span class="material-symbols-outlined">print</span>
                                </button>
                                <button type="button" class="btn btn-secondary" id="btnClone" title="Clone">
                                    <span class="material-symbols-outlined">content_copy</span>
                                </button>
                                <button type="button" class="btn btn-danger" id="btnDelete" title="Delete">
                                    <span class="material-symbols-outlined">delete</span>
                                </button>
                                <button type="button" class="btn btn-dark" id="btnUnpost" title="Unpost">
                                    <span class="material-symbols-outlined">undo</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Tab Contents -->
                <div class="tab-content w-100">
                    @await Html.PartialAsync("_Main")
                    @await Html.PartialAsync("_Other")
                    @await Html.PartialAsync("_History")
                </div>
            </div>
        </div>
    </div>
</div>

@section externalhtml {
    <div class="modal fade" id="saveconfirmationModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation</h5>
                </div>
                <div class="modal-body">
                    <p id="confirmationMessage"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                    <button type="button" class="btn btn-primary" id="confirmYes">Yes</button>
                </div>
            </div>
        </div>
    </div>

    @await Html.PartialAsync("_List");
}

@section Scripts {
    <script>

        // Confirmation handling
        let pendingAction = null;
        let companyId = 0;
        let currentStatus = 'all';
        let permissions = {};

        $(document).ready(function () {

            companyId = getUrlParameter('companyId') || 1;
            permissions = {
                canCreate: @Json.Serialize(canCreate),
                canEdit: @Json.Serialize(canEdit),
                canDelete: @Json.Serialize(canDelete),
                canRead: @Json.Serialize(canRead),
            };

            Refresh();
            defaultsection();
        });

        function openListModal() {
            try {
                // Show the modal
                const modal = new bootstrap.Modal(document.getElementById('viewInvoiceListModal'));
                modal.show();

                // Set default date range (last 3 months)
                const today = new Date();
                const threeMonthsAgo = new Date(today);
                threeMonthsAgo.setMonth(today.getMonth() - 3);

                // Format dates for input fields (YYYY-MM-DD)
                const formatDate = (date) => {
                    return date.toISOString().slice(0, 10);
                };

                // Set date values
                document.getElementById('fromDate').value = formatDate(threeMonthsAgo);
                document.getElementById('toDate').value = formatDate(today);

                // Load grid data
                loadInvoiceGrid();
            } catch (error) {
                console.error('Error opening list modal:', error);
                alert('Failed to open invoice list. Please try again.');
            }
        }

        function defaultsection() {
            $("#invoice_cmb_task, #invoice_cmb_details").closest(".col-md-2").hide();
            $("#invoice_cmb_department").closest(".col-md-2").hide();
        }

        function showConfirmation(message, callback) {
            $('#confirmationMessage').text(message);
            pendingAction = callback;
            $('#saveconfirmationModal').modal('show');
        }

        $('#confirmYes').click(function () {
            if (typeof pendingAction === 'function') {
                pendingAction();
                saveInvoice();
            }
            $('#saveconfirmationModal').modal('hide');
        });

        // Save button handler
        $('#btnSave').click(function () {
            showConfirmation('Do you want to save?', function () {
                $('#arInvoiceForm').submit();
            });
        });

        // Unpost button handler
        $('#btnUnpost').click(function () {
            showConfirmation('Do you want to unpost?', function () {
                unpostInvoice();
                console.log('Unposting...');
            });
        });

        // Other button handlers
        $('#btnReset').click(function () {
            $('#arInvoiceForm')[0].reset();
            ClearInvoice();
        });

        function Refresh() {

            const customerUrl = '@Url.Action("GetCustomerLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            const columnsProperties = [
                { field: 'customerCode', title: 'Code', width: 100 },
                { field: 'customerName', title: 'Name', width: 200 }
            ];
            const filterFields = ['customerCode', 'customerName'];
            BindMultiColumnComboBox(customerUrl, "invoice_cmb_customer", "customerName", "customerId", columnsProperties, filterFields);

            // Credit Terms
            const creditTermsUrl = '@Url.Action("GetCreditTermLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            BindComboBox(creditTermsUrl, "invoice_cmb_creditTerms", "creditTermName", "creditTermId");

            // Bank
            const bankUrl = '@Url.Action("GetBankLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            BindComboBox(bankUrl, "invoice_cmb_bank", "bankName", "bankId");

            // Currency
            const currencyUrl = '@Url.Action("GetCurrencyLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            BindComboBox(currencyUrl, "invoice_cmb_currency", "currencyCode", "currencyId");

            // Job Order
            const jobOrderUrl = '@Url.Action("GetJobOrderLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            BindComboBox(jobOrderUrl, "invoice_cmb_jobOrder", "jobOrderNo", "jobOrderId");

            //port
            const portUrl = '@Url.Action("GetPortLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            BindComboBox(portUrl, "invoice_cmb_port", "portName", "portId");

            // Vessel
            const vesselUrl = '@Url.Action("GetVesselLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            BindComboBox(vesselUrl, "invoice_cmb_vessel", "vesselName", "vesselId");

            // Barge
            const launchUrl = '@Url.Action("GetBargeLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            BindComboBox(launchUrl, "invoice_cmb_barge", "bargeName", "bargeId");

            // Service Type
            var ServiceType = @((int)OrderTypeCategory.ServiceType);

            const serviceTypeUrl = `@Url.Action("GetOrderTypeLookup", "Lookup", new { area = "" })?companyId=${companyId}&categoryId=${ServiceType}`;
            BindComboBox(serviceTypeUrl, "invoice_cmb_serviceType", "orderTypeName", "orderTypeId");

            // Product
            const productUrl = '@Url.Action("GetProductLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            BindComboBox(productUrl, "invoice_cmb_product", "productName", "productId");

            // GL Account
            const chartOfAccountUrl = '@Url.Action("GetChartOfAccountLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            const glcolumnsProperties = [
                { field: 'glCode', title: 'Code', width: 100 },
                { field: 'glName', title: 'Name', width: 200 }
            ];
            const glfilterFields = ['glCode', 'glName'];
            BindMultiColumnComboBox(chartOfAccountUrl, "invoice_cmb_gl", "glName", "glId", glcolumnsProperties, glfilterFields);

            // Department
            const departmentUrl = '@Url.Action("GetDepartmentLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            BindComboBox(departmentUrl, "invoice_cmb_department", "departmentName", "departmentId");

            // UOM
            const uomUrl = '@Url.Action("GetUOMLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            BindComboBox(uomUrl, "invoice_cmb_uom", "uomName", "uomId");

            // GST
            const gstUrl = '@Url.Action("GetGstLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            BindComboBox(gstUrl, "invoice_cmb_gst", "gstName", "gstId");

            // Country
            const countryUrl = '@Url.Action("GetCountryLookup", "Lookup", new { area = "" })?companyId=' + companyId;
            BindComboBox(countryUrl, "invoice_cmb_country", "countryName", "countryId");
        }

        function SelectedDropdown(DrpdwnName) {
        }

        function OnSelectDropdown(dataItem, DrpdwnName) {
            if (DrpdwnName === "invoice_cmb_jobOrder") {
                if (!dataItem || !dataItem.jobOrderId) {
                    // Clear Vessel combobox
                    let vesselCombo = $("#invoice_cmb_vessel").data("kendoComboBox");
                    if (vesselCombo) {
                        vesselCombo.value("");
                        vesselCombo.trigger("change");
                    }
                    // Clear Port combobox
                    let portCombo = $("#invoice_cmb_port").data("kendoComboBox");
                    if (portCombo) {
                        portCombo.value("");
                        portCombo.trigger("change");
                    }
                } else {
                    // When a valid Job Order is selected, load related tasks and handle job order selection
                    loadTaskDropdown(dataItem.jobOrderId);
                    handleJobOrderSelection(dataItem);
                }
            }
            else if (DrpdwnName === "invoice_cmb_task") {
                let selectedTaskId = dataItem.taskId;
                if (selectedTaskId) {
                    loadChargesDropdown(selectedTaskId);
                }
            }
            else if (DrpdwnName === "invoice_cmb_gl") {
                let selecteddataItem = dataItem;
                if (selecteddataItem) {
                    handleGlAccountSelection(selecteddataItem);
                }
            } else if (DrpdwnName === "invoice_cmb_creditTerms") {
                let selecteddataItem = dataItem;
                if (selecteddataItem) {
                    handleCreditTermsSelection(selecteddataItem);
                }
            } else if (DrpdwnName === "invoice_cmb_currency") {
                let selecteddataItem = dataItem;
                if (selecteddataItem) {
                    handleCurrencySelection(selecteddataItem);
                }
            } else if (DrpdwnName === "invoice_cmb_customer") {
                let selectedCustomerId = dataItem.customerId;
                if (selectedCustomerId) {
                    loadCustomerDependentDropdown(selectedCustomerId);
                }
            } else if (DrpdwnName === "invoice_cmb_customeraddress") {
                let selectedaddressdataItem = dataItem;
                if (selectedaddressdataItem) {
                    handleAddressSelection(selectedaddressdataItem);
                }
            } else if (DrpdwnName === "invoice_cmb_customercontact") {
                let selectedcontactdataItem = dataItem;
                if (selectedcontactdataItem) {
                    handleContactSelection(selectedcontactdataItem);
                }
            }
        }

        function loadCustomerDependentDropdown(customerId) {

            const addressUrl = `@Url.Action("GetCustomerAddressLookupFin", "Lookup", new { area = "" })?companyId=${companyId}&customerId=${customerId}`
            BindComboBox(addressUrl, "invoice_cmb_customeraddress", "address1", "addressId");

            const contactUrl = `@Url.Action("GetCustomerContactLookupFin", "Lookup", new { area = "" })?companyId=${companyId}&customerId=${customerId}`
            BindComboBox(contactUrl, "invoice_cmb_customercontact", "contactName", "contactId");
        }

        function handleAddressSelection(selectedaddressdataItem) {
            debugger;
            try {
                if (!selectedaddressdataItem) {
                    throw new Error("Invalid address data");
                }

                $("#addressLine1").val(selectedaddressdataItem.address1);
                $("#addressLine2").val(selectedaddressdataItem.address2);
                $("#addressLine3").val(selectedaddressdataItem.address3);
                $("#addressLine4").val(selectedaddressdataItem.address4);
                $("#pinCode").val(selectedaddressdataItem.pinCode);
                $("#phoneNo").val(selectedaddressdataItem.phoneNo);
                $("#invoice_cmb_country").data("kendoComboBox").value(selectedaddressdataItem.countryId > 0 ? selectedaddressdataItem.countryId : '');
                $("#faxNo").val(selectedaddressdataItem.faxNo);
                $("#emailAdd").val(selectedaddressdataItem.emailAdd);
                $("#webUrl").val(selectedaddressdataItem.webUrl);

            } catch (error) {
                console.error("Error handling address:", error);
                alert("Failed to load address details. Please try again.");
            }
        }

        function handleContactSelection(selectedcontactdataItem) {
            debugger;
            try {
                if (!selectedcontactdataItem) {
                    throw new Error("Invalid contact data");
                }

                $("#otherName").val(selectedcontactdataItem.otherName);
                $("#emailAdd").val(selectedcontactdataItem.emailAdd);
                $("#mobileNo").val(selectedcontactdataItem.mobileNo);
                $("#offNo").val(selectedcontactdataItem.offNo);
                $("#pinCode").val(selectedcontactdataItem.pinCode);
                $("#faxNo").val(selectedcontactdataItem.faxNo);
                $("#messId").val(selectedcontactdataItem.messId);
                $("#contactMessType").val(selectedcontactdataItem.contactMessType);

            } catch (error) {
                console.error("Error handling contact:", error);
                alert("Failed to load contact details. Please try again.");
            }
        }

        function handleCurrencySelection(selectedDataItem) {
            debugger;
            try {
                if (!selectedDataItem) {
                    throw new Error("Invalid Currency data");
                }

                const selectCurrencyId = selectedDataItem.currencyId;
                const accountDateStr = $("#accountDate").val();
                debugger;
                $.ajax({
                    url: '@Url.Action("GetExchangeRate", "Setting", new { area = "Setting" })',
                    type: "GET",
                    contentType: "application/json",
                    data: {
                        currencyId: selectCurrencyId,
                        trnsDate: accountDateStr,
                        companyId: companyId
                    },
                    success: function (response) {
                        debugger;
                        if (response) {
                            $("#exhRate").val(response);
                        } else {
                            throw new Error("Exchange rate not found in response.");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX Error:", error);
                        alert("Failed to retrieve exchange rate. Please try again.");
                    }
                });
            } catch (error) {
                console.error("Error handling Currency:", error);
                alert("Failed to load Currency details. Please try again.");
            }
        }

        function handleCreditTermsSelection(selecteddataItem) {
            debugger;
            try {
                if (!selecteddataItem) {
                    throw new Error("Invalid CreditTerms data");
                }

                const noDays = selecteddataItem.noDays;
                const accountDateStr = $("#accountDate").val();

                if (accountDateStr) {
                    // Parse the account date (assuming a standard date format e.g., "yyyy-MM-dd")
                    const accountDate = new Date(accountDateStr);
                    if (isNaN(accountDate)) {
                        throw new Error("Invalid account date format");
                    }
                    // Add the number of days
                    accountDate.setDate(accountDate.getDate() + noDays);

                    // Format the new date as a string (e.g., "yyyy-MM-dd")
                    const year = accountDate.getFullYear();
                    const month = ("0" + (accountDate.getMonth() + 1)).slice(-2);
                    const day = ("0" + accountDate.getDate()).slice(-2);
                    const dueDateStr = `${year}-${month}-${day}`;

                    $("#dueDate").val(dueDateStr);
                } else {
                    // If no account date is available, clear the due date field
                    $("#dueDate").val("");
                }
            } catch (error) {
                console.error("Error handling CreditTerms:", error);
                alert("Failed to load CreditTerms details. Please try again.");
            }
        }

        function handleJobOrderSelection(selecteddataItem) {

            try {
                if (!selecteddataItem) {
                    throw new Error("Invalid Job Order data");
                }
                const portCombo = $("#invoice_cmb_port").data("kendoComboBox");
                const vesselCombo = $("#invoice_cmb_vessel").data("kendoComboBox");

                if (selecteddataItem.portId) {
                    portCombo.value(selecteddataItem.portId);
                    portCombo.trigger("change");
                }

                if (selecteddataItem.vesselId) {
                    vesselCombo.value(selecteddataItem.vesselId);
                    vesselCombo.trigger("change");
                }

            } catch (error) {
                console.error("Error handling Job Order:", error);
                alert("Failed to load job order details. Please try again.");
            }
        }

        function handleGlAccountSelection(selecteddataItem) {

            try {
                if (!selecteddataItem) {
                    throw new Error("Invalid GL Account data");
                }
                const isJobOrder = selecteddataItem.isJobOrderMandatory;

                // Toggle visibility based on job order requirement
                if (isJobOrder) {
                    $("#invoice_cmb_task").closest(".col-md-2").show();
                    $("#invoice_cmb_details").closest(".col-md-2").show();
                    $("#invoice_cmb_department").closest(".col-md-2").hide();
                } else {
                    $("#invoice_cmb_task").closest(".col-md-2").hide();
                    $("#invoice_cmb_details").closest(".col-md-2").hide();
                    $("#invoice_cmb_department").closest(".col-md-2").show();
                }

                // Clear hide fields
                $("#invoice_cmb_task").data("kendoComboBox").value("");
                $("#invoice_cmb_details").data("kendoComboBox").value("");
                $("#invoice_cmb_department").data("kendoComboBox").value("");
            } catch (error) {
                console.error("Error handling GL Account:", error);
                // Show user-friendly message
            }
        }

        function loadTaskDropdown(jobOrderId) {
            // Task
            const taskUrl = `@Url.Action("GetTaskByJobOrderLookup", "Lookup", new { area = "" })?companyId=${companyId}&jobOrderId=${jobOrderId}`
            BindComboBox(taskUrl, "invoice_cmb_task", "taskName", "taskId");
        }

        function loadChargesDropdown(taskId) {
            const chargesUrl = `@Url.Action("GetChargeLookup", "Lookup", new { area = "" })?companyId=${companyId}&taskId=${taskId}`
            BindComboBox(chargesUrl, "tariff_cmb_chagre", "chargeName", "chargeId");
        }

        //clear Invoice & Details

        function ClearInvoice() {
            // Clear all inputs
            //delete all details also
        }

        function ClearInvoiceDetails() {
            // Clear inputs
            $("#itemNo, #qty, #unitPrice, #amount, #gstAmount, #totalAmount").val("0");
            $("#remarks").val("");

            $("#invoice_cmb_product").data("kendoComboBox").value("");
            $("#invoice_cmb_gl").data("kendoComboBox").value("");
            $("#invoice_cmb_task").data("kendoComboBox").value("");
            $("#invoice_cmb_details").data("kendoComboBox").value("");
            $("#invoice_cmb_department").data("kendoComboBox").value("");
            $("#invoice_cmb_uom").data("kendoComboBox").value("");
            $("#invoice_cmb_gst").data("kendoComboBox").value("");
        }

        function loadInvoiceGrid() {
            let searchString = $('#txtsearch').val();
            let customerId = 0;
            let fromDate = $('#fromDate').val();
            let toDate = $('#toDate').val();
            let isShowAll = 1;

            let url = '@Url.Action("List", "ArInvoice", new { area = "Account" })';
            let columns = [
                {
                    title: "Actions",
                    width: "150px",
                    template: function (dataItem) {
                        let buttons = `<button class="ps-0 border-0 bg-transparent" onclick="openJobOrderModal('${dataItem.jobOrderId}', 'view')">
<i class="material-symbols-outlined text-primary">visibility</i></button>`;

                        if (permissions.canEdit) {
                            buttons += `<button class="ps-0 border-0 bg-transparent" onclick="openJobOrderModal('${dataItem.jobOrderId}', 'edit')">
<i class="material-symbols-outlined text-warning">edit</i></button>`;
                        }

                        if (permissions.canDelete) {
                            buttons += `<button class="ps-0 border-0 bg-transparent" onclick="deleteJobOrder('${dataItem.jobOrderId}')">
<i class="material-symbols-outlined text-danger">delete</i></button>`;
                        }
                        return buttons;
                    }
                },
                { field: "invoiceNo", title: "Invoice No", type: "string", width: "150px" },
                { field: "accountDate", title: "Account Date", type: "date", format: "{0:yyyy-MM-dd}", width: "130px" },
                { field: "customerName", title: "Customer Name", type: "string", width: "200px" },
                { field: "currencyCode", title: "Currency Name", type: "string", width: "120px" },
                { field: "creditTermName", title: "Terms", type: "string", width: "150px" },
                { field: "bankName", title: "Bank", type: "string", width: "180px" },
                { field: "totAmt", title: "Amount", type: "number", format: "{0:n2}", width: "120px" },
                { field: "gstAmt", title: "Gst Amount", type: "number", format: "{0:n2}", width: "120px" },
                { field: "totAmtAftGst", title: "Total Amount", type: "number", format: "{0:n2}", width: "140px" },
                { field: "createBy", title: "CreateBy", type: "string", width: "150px" },
                { field: "editBy", title: "EditBy", type: "string", width: "150px" }
            ];

            let grid = $("#grid_invoice").data("kendoGrid");
            if (grid) {
                grid.dataSource.read({ searchString: searchString, companyId: companyId, customerId, fromDate, toDate, isShowAll });
            } else {
                initializeKendoGrid("grid_invoice", url, { searchString, companyId, customerId, fromDate, toDate, isShowAll }, columns);

                // Add row double-click event listener
                $("#" + "grid_invoice").on("dblclick", "tr", function () {
                    let dataItem = $("#grid_invoice").data("kendoGrid").dataItem(this);

                    if (dataItem) {
                        debugger;
                        let invoiceId = dataItem.invoiceId; // Assuming invoiceId exists in dataItem
                        let companyId = dataItem.companyId; // Assuming companyId exists in dataItem

                        // Hide the modal
                        $('#viewInvoiceListModal').modal('hide');

                        // Perform an AJAX call to fetch invoice details
                        $.ajax({
                            url: `@Url.Action("GetById", "ArInvoice", new { area = "Account" })`, // Replace with your actual API endpoint
                            type: "GET",
                            data: { invoiceId: invoiceId, invoiceNo: '', companyId: companyId },
                            success: function (response) {
                                debugger;
                                if (response.success) {
                                    populateModalFields(response.data);
                                } else {
                                    alert("No data found for the selected invoice.");
                                }
                            },
                            error: function (xhr, status, error) {
                                console.error("Error fetching invoice details:", error);
                                alert("Failed to fetch invoice details. Please try again.");
                            }
                        });
                    }
                });
            }
        }

        function populateModalFields(data) {
            debugger;
            $('#accountDate').val(formatDateToDDMMYYYY(data.accountDate));
            $('#invoice_cmb_customer').data("kendoMultiColumnComboBox").value(data.customerId > 0 ? data.customerId : '');
            $('#referenceNo').val(data.referenceNo);
            $('#invoice_cmb_creditTerms').data("kendoComboBox").value(data.creditTermId > 0 ? data.creditTermId : '');
            $('#dueDate').val(formatDateToDDMMYYYY(data.dueDate));
            $('#invoice_cmb_bank').data("kendoComboBox").value(data.bankId > 0 ? data.bankId : '');
            $('#invoice_cmb_currency').data("kendoComboBox").value(data.currencyId > 0 ? data.currencyId : '');
            $('#exhRate').val(data.exhRate);
            $('#operationno').val(data.operationNo);
            $('#invoice_cmb_jobOrder').data("kendoComboBox").value(data.jobOrderId > 0 ? data.jobOrderId : '');
            $('#invoice_cmb_vessel').data("kendoComboBox").value(data.vesselId > 0 ? data.vesselId : '');
            $('#invoice_cmb_port').data("kendoComboBox").value(data.portId > 0 ? data.portId : '');
            $('#invoice_cmb_barge').data("kendoComboBox").value(data.bargeId > 0 ? data.bargeId : '');
           /* $('#invoice_cmb_transtype').data("kendoComboBox").value(data.transTypeId > 0 ? data.transTypeId : '');*/
            $('#invoice_cmb_serviceType').data("kendoComboBox").value(data.serviceTypeId > 0 ? data.serviceTypeId : '');
            $('#totAmt').val(data.totAmt);
            $('#gstAmt').val(data.gstAmt);
            $('#totAmtAftGst').val(data.totAmtAftGst);
            $('#totLocalAmt').val(data.totLocalAmt);
            $('#gstLocalAmt').val(data.gstLocalAmt);
            $('#totLocalAmtAftGst').val(data.totLocalAmtAftGst);
            $('#remarks').val(data.remarks);
            $('#description').val(data.description);

            debugger;
            //data.data_details
            populateInvoiceDetailsGrid(data.data_details)

        }

        //Invoice Details

        function populateInvoiceDetailsGrid(dataDetails) {
            debugger;
            let grid = $("#grid_invoicedetails").data("kendoGrid");

            if (grid) {
                // Clear existing data and add new details
                grid.dataSource.data(dataDetails);
            } else {
                // Initialize Kendo Grid if not already initialized
                initializeKendoGridWithoutPaging("grid_invoicedetails", null, {}, [
                    {
                        title: "Actions",
                        width: "150px",
                        template: function (dataItem) {
                            let buttons = `<button class="ps-0 border-0 bg-transparent" onclick="openJobOrderModal('${dataItem.jobOrderId}', 'view')">
                            <i class="material-symbols-outlined text-primary">visibility</i></button>`;
                           
                                buttons += `<button class="ps-0 border-0 bg-transparent" onclick="openJobOrderModal('${dataItem.jobOrderId}', 'edit')">
                            <i class="material-symbols-outlined text-warning">edit</i></button>`;
                            
                                buttons += `<button class="ps-0 border-0 bg-transparent" onclick="deleteJobOrder('${dataItem.jobOrderId}')">
                            <i class="material-symbols-outlined text-danger">delete</i></button>`;
                           

                            return buttons;
                        }
                    },
                    { field: "itemNo", title: "Item No", width: "120px" },
                   
                    { field: "productId", title: "Product ID", width: "100px" ,hidden:true},
                    { field: "productName", title: "Product Name", width: "150px" },
                    { field: "glId", title: "GL ID", width: "100px", hidden: true },
                    { field: "glCode", title: "GL Code", width: "100px" },
                    { field: "glName", title: "GL Name", width: "150px" },
                    { field: "qty", title: "Quantity", format: "{0:n2}", width: "100px" },
                    { field: "unitPrice", title: "Unit Price", format: "{0:c}", width: "120px" },
                    { field: "amount", title: "Amount", format: "{0:c}", width: "120px" },
                    { field: "gstPercent", title: "GST Percent", format: "{0:p}", width: "100px" },
                    { field: "gstAmount", title: "GST Amount", format: "{0:c}", width: "120px" },
                    { field: "totalAmount", title: "Total Amount", format: "{0:c}", width: "150px" },
                  
                    { field: "remarks", title: "Remarks", width: "150px" },
                    { field: "departmentId", title: "Department ID", width: "120px", hidden: true },
                    { field: "departmentName", title: "Department Name", width: "150px" },
                    { field: "taskId", title: "Task ID", width: "120px", hidden: true },
                    { field: "taskName", title: "Task Name", width: "150px" },
                    { field: "serviceId", title: "Service ID", width: "120px", hidden: true },
                    { field: "serviceName", title: "Service Name", width: "150px" },
                    { field: "uomId", title: "UOM ID", width: "100px", hidden: true },
                    { field: "uomName", title: "UOM Name", width: "120px" },
                    { field: "gstId", title: "GST ID", width: "100px", hidden: true },
                    { field: "gstName", title: "GST Name", width: "150px" },
                    { field: "totalLocalAmount", title: "Total Local Amount", format: "{0:c}", width: "150px" },
                    { field: "gstLocalAmount", title: "GST Local Amount", format: "{0:c}", width: "150px" }
                ], 600);
                $("#grid_invoicedetails").data("kendoGrid").dataSource.data(dataDetails);
            }
        }

        function AddInvoiceDetails() {
            // Get input values with proper validation
            const itemNo = $("#itemNo").val() || "";
            const qty = parseFloat($("#qty").val()) || 0;
            const unitPrice = parseFloat($("#unitPrice").val()) || 0;
            const remarks = $("#remarks").val() || "";

            // Get combobox values with fallbacks
            const productCombo = $("#invoice_cmb_product").data("kendoComboBox");
            const glCombo = $("#invoice_cmb_gl").data("kendoComboBox");
            const taskCombo = $("#invoice_cmb_task").data("kendoComboBox");
            const detailsCombo = $("#invoice_cmb_details").data("kendoComboBox");
            const departmentCombo = $("#invoice_cmb_department").data("kendoComboBox");
            const uomCombo = $("#invoice_cmb_uom").data("kendoComboBox");
            const gstCombo = $("#invoice_cmb_gst").data("kendoComboBox");

            // Validate mandatory fields
            if (!productCombo.value() || !glCombo.value() || !taskCombo.value()) {
                alert("Please fill all mandatory fields (*)");
                return;
            }

            // Calculate amounts
            const amount = qty * unitPrice;
            const gstPercent = parseFloat(gstCombo.value()) || 0;
            const gstAmount = (amount * gstPercent) / 100;
            const totalAmount = amount + gstAmount;

            // Create detail object with proper field names
            const detailItem = {
                // Item Info
                itemNo: itemNo,
                remarks: remarks,

                // Product Info
                productId: productCombo.value(),
                productName: productCombo.text(),

                // GL Account Info
                glId: glCombo.value(),
                glCode: glCombo.value(),  // Assuming code is stored in value
                glName: glCombo.text(),

                // Department/Task Info
                departmentId: departmentCombo.value(),
                departmentName: departmentCombo.text(),
                taskId: taskCombo.value(),
                taskName: taskCombo.text(),

                // Service/Details
                serviceId: detailsCombo.value(),
                serviceName: detailsCombo.text(),

                // UOM Info
                uomId: uomCombo.value(),
                uomName: uomCombo.text(),

                // Pricing Info
                qty: qty,
                unitPrice: unitPrice,
                amount: amount,

                // GST Info
                gstId: gstCombo.value(),
                gstName: gstCombo.text(),
                gstPercent: gstPercent,
                gstAmount: gstAmount,

                // Totals
                totalAmount: totalAmount,
                totalLocalAmount: totalAmount,  // Add currency conversion logic if needed
                gstLocalAmount: gstAmount       // Add currency conversion logic if needed
            };

            // Add to grid
            const grid = $("#grid_invoicedetails").data("kendoGrid");
            grid.dataSource.add(detailItem);
            grid.refresh();

            // Clear form fields
            ClearInvoiceDetails();
        }

        //Invoice Save
        function saveInvoice() {
            // 1. Collect Header Data
            const invoiceHd = {
                InvoiceId: $("#invoiceId").val(),
                InvoiceNo: $("#invoiceNo").val(),
                AccountDate: $("#accountDate").val(),
                DueDate: $("#dueDate").val(),
                ReferenceNo: $("#referenceNo").val(),
                CustomerId: $("#invoice_cmb_customer").data("kendoComboBox").value()||0,
                CreditTermId: $("#invoice_cmb_creditTerms").data("kendoComboBox").value() || 0,
                CurrencyId: $("#invoice_cmb_currency").data("kendoComboBox").value() || 0,
                ExhRate: $("#exhRate").val(),
                BankId: $("#invoice_cmb_bank").data("kendoComboBox").value() || 0,
                JobOrderId: $("#invoice_cmb_jobOrder").data("kendoComboBox").value() || 0,
                VesselId: $("#invoice_cmb_vessel").data("kendoComboBox").value() || 0,
                PortId: $("#invoice_cmb_port").data("kendoComboBox").value() || 0,
                BargeId: $("#invoice_cmb_barge").data("kendoComboBox").value() || 0,
                ServiceTypeId: $("#invoice_cmb_serviceType").data("kendoComboBox").value() || 0,
                TotAmt: $("#totAmt").val(),
                TotLocalAmt: $("#totLocalAmt").val(),
                GstAmt: $("#gstAmt").val(),
                GstLocalAmt: $("#gstLocalAmt").val(),
                TotAmtAftGst: $("#totAmtAftGst").val(),
                TotLocalAmtAftGst: $("#totLocalAmtAftGst").val(),
                Remarks: $("#remarks").val(),
            };

            // 2. Collect Grid Data (Details)
            const grid = $("#grid_invoicedetails").data("kendoGrid");
            const invoiceDt = grid.dataSource.data().map(item => ({
                ItemNo: item.itemNo,
                ProductId: item.productId,
                DepartmentId: item.departmentId,
                TaskId: item.taskId,
                ServiceId: item.serviceId,
                GlId: item.glId,
                QTY: item.qty,
                UomId: item.uomId,
                UnitPrice: item.unitPrice,
                TotAmt: item.totAmt,
                TotLocalAmt: item.totLocalAmt,
                GstId: item.gstId,
                GstPercentage: item.gstPercentage,
                GstAmt: item.gstAmt,
                GstLocalAmt: item.gstLocalAmt,
                Remarks: item.remarks,
            }));

            // 3. Combine into One Object
            const invoiceData = {
                invoiceHd: invoiceHd,
                invoiceDt: invoiceDt
            };

            // 4. Send to Server (Example using AJAX)
            $.ajax({
               url: '@Url.Action("Save", "ArInvoice", new { area = "Account" })',
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(invoiceData),
                success: function (response) {

                    console.log("Invoice saved:", response);
                },
                error: function (error) {
                    console.error("Error saving invoice:", error);
                }
            });
        }

        //Invoice Unpost & Delete
        function unpostInvoice() {
            // Unpost logic here
            console.log("Unposting invoice...");
        }

        function deleteInvoice() {
            // Unpost logic here
            console.log("Unposting invoice...");
        }
    </script>
}
@{
    ViewData["Title"] = $"Account Group ";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@{
    bool canCreate = ViewBag.IsCreate ?? false;
    bool canEdit = ViewBag.IsEdit ?? false;
    bool canDelete = ViewBag.IsDelete ?? false;
    bool canRead = ViewBag.IsRead ?? false;
    bool canExport = ViewBag.IsExport ?? false;
    bool canPrint = ViewBag.IsPrint ?? false;
    int companyId = ViewBag.CompanyId;
}

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <h3>Account Groups</h3>

                <!-- Action Row -->
                <div class="d-flex flex-wrap justify-content-between align-items-center gap-2 mb-3">
                    <!-- Search Section -->
                    <div class="d-flex flex-grow-1 gap-2 align-items-center me-3">
                        <div style="width: 150px;">
                            <input type="text" id="txtsearch" class="form-control" placeholder="Search..." onkeydown="handleEnterKey(event)">
                        </div>
                        <button type="button" class="btn btn-primary btn-sm" onclick="loadAccountGroupGrid();">
                            <span class="material-symbols-outlined">search</span>
                        </button>
                        <button type="button" class="btn btn-secondary btn-sm" onclick="clearSearch();">
                            <span class="material-symbols-outlined">close</span>
                        </button>
                    </div>

                    <!-- Add Button -->
                    <div class="ms-auto">
                        <button type="button" class="btn btn-success btn-sm" id="refreshGrid" onclick="loadAccountGroupGrid();">
                            <span class="material-symbols-outlined">refresh</span>
                        </button>
                        @if (canCreate)
                        {
                            <button type="button" class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#addAccountGroupModal" id="addAccountGrouprecord">
                                <span class="material-symbols-outlined">add</span>
                            </button>
                        }
                    </div>
                </div>
                <div id="gridAccountGroup"></div>
            </div>
        </div>
    </div>
</div>

@section externalhtml {
    <!-- Add/Edit Modal -->
    <div class="modal fade" id="addAccountGroupModal" tabindex="-1" aria-labelledby="addAccountGroupModalLabel" aria-hidden="true" data-bs-backdrop="static">
        <div class="modal-dialog modal-dialog-scrollable modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addAccountGroupModalLabel">Add/Edit Account Group</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="clearAccountGroupForm();"></button>
                </div>
                <div class="modal-body p-4">
                    <form id="accountGroupForm">
                        <input type="hidden" id="accGroupId" />
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="accGroupCode" class="form-label">Code <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="accGroupCode" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="accGroupName" class="form-label">Name <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="accGroupName" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label" for="seqNo">Sequence Number</label>
                                    <input type="number" class="form-control" id="seqNo" min="0" max="254" value="0">
                                    <div class="invalid-feedback">Value must be between 0 and 254</div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <label for="remarks" class="form-label">Remarks</label>
                                    <textarea class="form-control" id="remarks" rows="2"></textarea>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="isActive">
                                    <label class="form-check-label" for="isActive">Is Active</label>
                                </div>
                            </div>
                        </div>

                        <!-- Audit Fields -->
                        <div class="accordion mt-3" id="auditAccordion">
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#auditCollapse">
                                        Audit Details
                                    </button>
                                </h2>
                                <div id="auditCollapse" class="accordion-collapse collapse">
                                    <div class="accordion-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <label for="createBy" class="form-label">Created By</label>
                                                <p id="createBy" class="form-control-plaintext"></p>
                                            </div>
                                            <div class="col-md-6">
                                                <label for="createDate" class="form-label">Created Date</label>
                                                <p id="createDate" class="form-control-plaintext"></p>
                                            </div>
                                            <div class="col-md-6">
                                                <label for="editBy" class="form-label">Modified By</label>
                                                <p id="editBy" class="form-control-plaintext"></p>
                                            </div>
                                            <div class="col-md-6">
                                                <label for="editDate" class="form-label">Modified Date</label>
                                                <p id="editDate" class="form-control-plaintext"></p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="btnAccountGroupClose" onclick="clearAccountGroupForm()">Close</button>
                    <button type="button" class="btn btn-primary" id="btnAccountGroupEdit">Edit</button>
                    <button type="button" class="btn btn-secondary" id="btnAccountGroupClear" onclick="clearAccountGroupForm()">Clear</button>
                    <button type="button" class="btn btn-primary" id="btnAccountGroupSave" onclick="saveAccountGroup()">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        let companyId = 0;
        let permissions = {};
        $(document).ready(function () {
            companyId = getUrlParameter('companyId') || 0;

            permissions = {
                canCreate: @Json.Serialize(canCreate),
                canEdit: @Json.Serialize(canEdit),
                canDelete: @Json.Serialize(canDelete),
                canRead: @Json.Serialize(canRead),
            };

            $('#accGroupCode, #accGroupName').on('input', checkAccountGroupMandatoryFields);
            loadAccountGroupGrid();
            initializeAccountGroupForm();
            clearAccountGroupForm();

            $('#btnAccountGroupEdit').on('click', function () { setAccountGroupMode("edit"); });
            $('#btnAccountGroupClose').on('click', function () { $('#addAccountGroupModal').modal('hide'); });
            $('#addAccountGrouprecord').on('click', function () {
                initializeAccountGroupForm();
                $('#addAccountGroupModal').modal('show');
            });
        });

        function initializeAccountGroupForm() {
            clearAccountGroupForm();
            $('#isActive').prop('checked', true);
        }

        function clearAccountGroupForm() {
            $('#accountGroupForm')[0].reset();

            $('#accGroupId').val(0);
            $('#createBy').text('');
            $('#createDate').text('');
            $('#editBy').text('');
            $('#editDate').text('');

            // Reset readonly and disabled states
            $('#accGroupCode, #accGroupName, #seqNo, #remarks').prop('readonly', false);
            $('#isActive').prop('disabled', false);

            $('#isActive').prop('checked', true);
            $('#btnAccountGroupSave').prop('disabled', false);
            $('#btnAccountGroupSave').show();
            $('#btnAccountGroupClear').show();
            $('#btnAccountGroupEdit').hide();
        }

        function handleEnterKey(event) {
            if (event.key === 'Enter') loadAccountGroupGrid();
        }

        function clearSearch() {
            $('#txtsearch').val('');
            loadAccountGroupGrid();
        }

        function checkAccountGroupMandatoryFields() {
            let isValid = $('#accGroupCode').val().trim() && $('#accGroupName').val().trim();
            $('#btnAccountGroupSave').prop('disabled', !isValid);

            // Add visual feedback
            $('#accGroupCode, #accGroupName').toggleClass('is-invalid', !isValid);
        }

        function loadAccountGroupGrid() {
            let searchString = $('#txtsearch').val();
            let url = '@Url.Action("AccountGroupList", "AccountGroup", new { area = "Master" })';
            let columns = [
                {
                    title: "Actions",
                    width: "100px",
                    template: function (dataItem) {
                        let buttons = ` <button class="ps-0 border-0 bg-transparent" onclick="openAccountGroupModal('${dataItem.accGroupId}', 'view')">
                        <i class="material-symbols-outlined text-primary">visibility</i></button>`;

                        if (permissions.canEdit) {
                            buttons += `<button class="ps-0 border-0 bg-transparent" onclick="openAccountGroupModal('${dataItem.accGroupId}', 'edit')">
                        <i class="material-symbols-outlined text-warning">edit</i></button>`;
                        }

                        if (permissions.canDelete) {
                            buttons += `<button class="ps-0 border-0 bg-transparent" onclick="deleteAccountGroup('${dataItem.accGroupId}')">
                        <i class="material-symbols-outlined text-danger">delete</i></button>`;
                        }
                        return buttons;
                    }
                },
                { field: "accGroupCode", title: "Code" },
                { field: "accGroupName", title: "Name" },
                { field: "seqNo", title: "Sequence" },
                { field: "remarks", title: "Remarks" },
                { field: "isActive", title: "Active", template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />' }
            ];

            let grid = $("#gridAccountGroup").data("kendoGrid");
            if (grid) {

                grid.dataSource.read({ searchString: searchString, companyId: companyId });
            } else {
                // Initialize grid if it doesn’t exist
                initializeKendoGrid("gridAccountGroup", url, { searchString, companyId }, columns);
            }
        }

        function openAccountGroupModal(id, mode) {
            const $modal = $('#addAccountGroupModal');
            $modal.find('.modal-content').append('<div class="modal-overlay"><div class="spinner"></div></div>');
            $.get('@Url.Action("GetAccountGroupById", "AccountGroup", new { area = "Master" })', { accGroupId: id, companyId })
                .done(function (response) {
                    if (response.success) {
                        populateAccountGroupModalFields(response.data);
                        setAccountGroupMode(mode);
                        $('#addAccountGroupModal').modal('show');
                    }
                })
                .always(() => $modal.find('.modal-overlay').remove());
        }

        function populateAccountGroupModalFields(data) {
            $('#accGroupId').val(data.accGroupId);
            $('#accGroupCode').val(data.accGroupCode);
            $('#accGroupName').val(data.accGroupName);
            $('#seqNo').val(data.seqNo);
            $('#remarks').val(data.remarks);
            $('#isActive').prop('checked', data.isActive);

            $('#createBy').text(data.createBy || "N/A");
            $('#createDate').text(data.createDate ? new Date(data.createDate).toLocaleString() : "N/A");
            $('#editBy').text(data.editBy || "N/A");
            $('#editDate').text(data.editDate ? new Date(data.editDate).toLocaleString() : "N/A");

            checkAccountGroupMandatoryFields();
        }

        function setAccountGroupMode(mode) {
            const isView = mode === 'view';
            const canEdit = permissions.canEdit && !isView;

            $('#accGroupCode, #accGroupName, #seqNo, #remarks').prop('readonly', !canEdit);
            $('#isActive').prop('disabled', !canEdit);
            $('#btnAccountGroupSave').toggle(canEdit);
            $('#btnAccountGroupEdit').toggle(isView && permissions.canEdit);
            $('#btnAccountGroupClose').show();
            $('#btnAccountGroupClear').hide();
            $('#btnClear').hide();
        }

        function deleteAccountGroup(id) {
            showDeleteModal("Are you sure you want to delete this records?", function () {
                $.ajax({
                    url: '@Url.Action("DeleteAccountGroup", "AccountGroup", new { area = "Master" })',
                    type: "DELETE",
                    data: { accGroupId: id, companyId: companyId },
                    success: function (response) {
                        if (response.success) {
                            loadAccountGroupGrid();
                            $('#confirmationModal').modal('hide');
                        }
                    }
                });
            });
        }

        function saveAccountGroup() {
            let accountGroupData = {
                AccGroupId: parseInt($('#accGroupId').val()) || 0,
                AccGroupCode: $('#accGroupCode').val().trim(),
                AccGroupName: $('#accGroupName').val().trim(),
                SeqNo: parseInt($('#seqNo').val()) || 0,
                Remarks: $('#remarks').val(),
                IsActive: $('#isActive').prop('checked')
            };

            console.log("accountGroup Data : " + accountGroupData);

            if (!accountGroupData.AccGroupCode || !accountGroupData.AccGroupName) {
                alert('Code and Name are required!');
                return;
            }

            $.ajax({
                url: '@Url.Action("SaveAccountGroup", "AccountGroup", new { area = "Master" })',
                type: "POST",
                data: JSON.stringify({ accountGroup: accountGroupData, companyId }),
                contentType: "application/json",
                success: function (response) {
                    if (response.success) {
                        debugger;
                        loadAccountGroupGrid();
                        clearAccountGroupForm();
                        $('#addAccountGroupModal').modal('hide');
                    } else {
                        alert(response.message || "Failed to save account group.");
                    }
                },
                error: function (xhr) {
                    alert("Error: " + (xhr.responseJSON?.message || "An unexpected error occurred"));
                }
            });
        }
    </script>
}
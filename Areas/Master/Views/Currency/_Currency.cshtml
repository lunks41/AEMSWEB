<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <h3>Currency</h3>

                <!-- Action Row -->
                <div class="d-flex flex-wrap justify-content-between align-items-center gap-2 mb-3">
                    <!-- Search Section -->
                    <div class="d-flex flex-grow-1 gap-2 align-items-center me-3">
                        <div style="width: 150px;">
                            <input type="text" id="txtsearch" class="form-control" placeholder="Search..." onkeydown="handleEnterKey(event)">
                        </div>
                        <button type="button" class="btn btn-primary btn-sm" onclick="loadCurrencyGrid();">
                            <span class="material-symbols-outlined">search</span>
                        </button>
                        <button type="button" class="btn btn-secondary btn-sm" onclick="clearSearch();">
                            <span class="material-symbols-outlined">close</span>
                        </button>
                    </div>

                    <!-- Add Button -->
                    <div class="ms-auto">
                        <button type="button" class="btn btn-success btn-sm" id="refreshGrid" onclick="loadCurrencyGrid();">
                            <span class="material-symbols-outlined">refresh</span>
                        </button>
                        <button type="button" class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#addCurrencyModal" id="addCurrencyrecord">
                            <span class="material-symbols-outlined">add</span>
                        </button>
                    </div>
                </div>
                <div id="gridCurrency"></div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Modal -->
<div class="modal fade" id="addCurrencyModal" tabindex="-1" aria-labelledby="addCurrencyModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-scrollable modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addCurrencyModalLabel">Add/Edit Currency</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="clearCurrencyForm();"></button>
            </div>
            <div class="modal-body p-4">
                <form id="CurrencyForm">
                    <input type="hidden" id="currencyId" />
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="currencyCode" class="form-label">Code <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="currencyCode" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="currencyName" class="form-label">Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="currencyName" required>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label for="currencyremarks" class="form-label">Remarks</label>
                                <textarea class="form-control" id="currencyremarks" rows="2"></textarea>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="currencyisMultiply">
                                <label class="form-check-label" for="currencyisMultiply">Is Multiply</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="currencyisActive">
                                <label class="form-check-label" for="currencyisActive">Is Active</label>
                            </div>
                        </div>
                    </div>

                    <!-- Audit Fields -->
                    <div class="accordion mt-3" id="auditAccordion">
                        <div class="accordion-item">
                            <h2 class="accordion-header">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#auditCollapse">
                                    Audit Details
                                </button>
                            </h2>
                            <div id="auditCollapse" class="accordion-collapse collapse">
                                <div class="accordion-body">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <label for="CurrencycreateBy" class="form-label">Created By</label>
                                            <p id="CurrencycreateBy" class="form-control-plaintext"></p>
                                        </div>
                                        <div class="col-md-6">
                                            <label for="CurrencycreateDate" class="form-label">Created Date</label>
                                            <p id="CurrencycreateDate" class="form-control-plaintext"></p>
                                        </div>
                                        <div class="col-md-6">
                                            <label for="CurrencyeditBy" class="form-label">Modified By</label>
                                            <p id="CurrencyeditBy" class="form-control-plaintext"></p>
                                        </div>
                                        <div class="col-md-6">
                                            <label for="CurrencyeditDate" class="form-label">Modified Date</label>
                                            <p id="CurrencyeditDate" class="form-control-plaintext"></p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="btnCurrencyClose" onclick="clearCurrencyForm()">Close</button>
                <button type="button" class="btn btn-primary" id="btnCurrencyEdit">Edit</button>
                <button type="button" class="btn btn-secondary" id="btnCurrencyClear" onclick="clearCurrencyForm()">Clear</button>
                <button type="button" class="btn btn-primary" id="btnCurrencySave" onclick="saveCurrency()">Save</button>
            </div>
        </div>
    </div>
</div>

<script>
        function initializeCurrencyForm() {
            clearCurrencyForm();
            $('#currencyisActive').prop('checked', true);
        }

        function clearCurrencyForm() {
            $('#CurrencyForm')[0].reset();

            $('#CurrencyId').val(0);
            $('#CurrencycreateBy').text('');
            $('#CurrencycreateDate').text('');
            $('#CurrencyeditBy').text('');
            $('#CurrencyeditDate').text('');

            // Reset readonly and disabled states
            $('#currencyCode, #currencyName, #seqNo, #remarks').prop('readonly', false);
            $('#currencyisActive').prop('disabled', false);

            $('#currencyisActive').prop('checked', true);
            $('#btnCurrencySave').prop('disabled', false);
            $('#btnCurrencySave').show();
            $('#btnCurrencyClear').show();
            $('#btnCurrencyEdit').hide();
        }

        function handleEnterKey(event) {
            if (event.key === 'Enter') loadCurrencyGrid();
        }

        function clearSearch() {
            $('#txtsearch').val('');
            loadCurrencyGrid();
        }

        function checkCurrencyMandatoryFields() {
            let isValid = $('#currencyCode').val().trim() && $('#currencyName').val().trim();
            $('#btnCurrencySave').prop('disabled', !isValid);

            // Add visual feedback
            $('#currencyCode, #currencyName').toggleClass('is-invalid', !isValid);
        }

        function loadCurrencyGrid() {
            let searchString = $('#txtsearch').val();
            let url = '@Url.Action("CurrencyList", "Currency", new { area = "Master" })';
            let columns = [
                {
                    title: "Actions",
                    width: "100px",
                    template: function (dataItem) {
                        let buttons = ` <button class="ps-0 border-0 bg-transparent" onclick="openCurrencyModal('${dataItem.currencyId}', 'view')">
                        <i class="material-symbols-outlined text-primary">visibility</i></button>`;

                        if (permissions.canEdit) {
                            buttons += `<button class="ps-0 border-0 bg-transparent" onclick="openCurrencyModal('${dataItem.currencyId}', 'edit')">
                        <i class="material-symbols-outlined text-warning">edit</i></button>`;
                        }

                        if (permissions.canDelete) {
                            buttons += `<button class="ps-0 border-0 bg-transparent" onclick="deleteCurrency('${dataItem.currencyId}')">
                        <i class="material-symbols-outlined text-danger">delete</i></button>`;
                        }
                        return buttons;
                    }
                },
                { field: "currencyCode", title: "Code" },
                { field: "currencyName", title: "Name" },
                { field: "remarks", title: "Remarks" },
                { field: "isMultiply", title: "Multiply", template: '<input type="checkbox" #= isMultiply ? "checked" : "" # disabled />' },
                { field: "isActive", title: "Active", template: '<input type="checkbox" #= isActive ? "checked" : "" # disabled />' }
            ];

            let grid = $("#gridCurrency").data("kendoGrid");
            if (grid) {

                grid.dataSource.read({ searchString: searchString, companyId: companyId });
            } else {
                // Initialize grid if it doesn’t exist
                initializeKendoGrid("gridCurrency", url, { searchString, companyId }, columns);
            }
        }

        function openCurrencyModal(id, mode) {
            const $modal = $('#addCurrencyModal');
            $modal.find('.modal-content').append('<div class="modal-overlay"><div class="spinner"></div></div>');
            $.get('@Url.Action("GetCurrencyById", "Currency", new { area = "Master" })', { currencyId: id, companyId })
                .done(function (response) {
                    if (response.success) {
                        populateCurrencyModalFields(response.data);
                        setCurrencyMode(mode);
                        $('#addCurrencyModal').modal('show');
                    }
                })
                .always(() => $modal.find('.modal-overlay').remove());
        }

        function populateCurrencyModalFields(data) {
            $('#currencyId').val(data.currencyId);
            $('#currencyCode').val(data.currencyCode);
            $('#currencyName').val(data.currencyName);
            $('#currencyremarks').val(data.remarks);
            $('#currencyisMultiply').prop('checked', data.isMultiply);
            $('#currencyisActive').prop('checked', data.isActive);
            $('#CurrencycreateBy').text(data.createBy || "N/A");
            $('#CurrencycreateDate').text(data.createDate ? new Date(data.createDate).toLocaleString() : "N/A");
            $('#CurrencyeditBy').text(data.editBy || "N/A");
            $('#CurrencyeditDate').text(data.editDate ? new Date(data.editDate).toLocaleString() : "N/A");

            checkCurrencyMandatoryFields();
        }

        function setCurrencyMode(mode) {
            const isView = mode === 'view';
            const canEdit = permissions.canEdit && !isView;

            $('#currencyCode, #currencyName,  #currencyremarks').prop('readonly', !canEdit);
            $('#currencyisMultiply').prop('disabled', !canEdit);
            $('#currencyisActive').prop('disabled', !canEdit);
            $('#btnCurrencySave').toggle(canEdit);
            $('#btnCurrencyEdit').toggle(isView && permissions.canEdit);
            $('#btnCurrencyClose').show();
            $('#btnCurrencyClear').hide();
        }

        function deleteCurrency(id) {
            showDeleteModal("Are you sure you want to delete this records?", function () {
                $.ajax({
                    url: '@Url.Action("DeleteCurrency", "Currency", new { area = "Master" })',
                    type: "DELETE",
                    data: { currencyId: id, companyId: companyId },
                    success: function (response) {
                        if (response.success) {
                            loadCurrencyGrid();
                            $('#confirmationModal').modal('hide');
                        }
                    }
                });
            });
        }

        function saveCurrency() {
            let CurrencyData = {
                CurrencyId: parseInt($('#currencyId').val()) || 0,
                CurrencyCode: $('#currencyCode').val().trim(),
                CurrencyName: $('#currencyName').val().trim(),
                Remarks: $('#currencyremarks').val(),
                IsMultiply: $('#currencyisMultiply').prop('checked'),
                IsActive: $('#currencyisActive').prop('checked')
            };

            console.log("Currency Data : " + CurrencyData);

            if (!CurrencyData.CurrencyCode || !CurrencyData.CurrencyName) {
                alert('Code and Name are required!');
                return;
            }

            $.ajax({
                url: '@Url.Action("SaveCurrency", "Currency", new { area = "Master" })',
                type: "POST",
                data: JSON.stringify({ currency: CurrencyData, companyId }),
                contentType: "application/json",
                success: function (response) {
                    if (response.success) {
                        debugger;
                        loadCurrencyGrid();
                        clearCurrencyForm();
                        $('#addCurrencyModal').modal('hide');
                    } else {
                        alert(response.message || "Failed to save account group.");
                    }
                },
                error: function (xhr) {
                    alert("Error: " + (xhr.responseJSON?.message || "An unexpected error occurred"));
                }
            });
        }
</script>